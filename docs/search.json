[{"path":"https://github.com/fasrc/CRE/articles/CRE.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"CRE","text":"install CRE package properly, first must install XBART XBCF packages:","code":""},{"path":"https://github.com/fasrc/CRE/articles/CRE.html","id":"how-to-install-the-xbart-package-linux","dir":"Articles","previous_headings":"Installation","what":"How to install the XBART package (linux):","title":"CRE","text":"terminal, install necessary packages via homebrew: Find path LDFLAGS running brew info llvm (see example): compilers find llvm may need set: Run following two commands take note output: Run following terminal user directory: Copy following text editor, replacing /path//_ paths found : Example Makevars file: R, run:","code":"~ $ brew install gfortran ~ $ brew install llvm boost libomp ~ $ export LDFLAGS=\"-L/usr/local/opt/llvm/lib\" ~ $ which clang ~ $ which clang++ ~ $ mkdir ~/.R # if it doesn’t already exist ~ $ cd .R .R $ touch Makevars .R $ open -e Makevars CC=/path/to/clang CXX=/path/to/clang++ CXX11=/path/to/clang++ CXX14=/path/to/clang++ CXX17=/path/to/clang++ CXX1X=/path/to/clang++ LDFLAGS=path/to/LDFLAGS -o task -fopenmp CC=/usr/local/opt/llvm/bin/clang CXX=/usr/local/opt/llvm/bin/clang++ CXX11=/usr/local/opt/llvm/bin/clang++  CXX14=/usr/local/opt/llvm/bin/clang++  CXX17=/usr/local/opt/llvm/bin/clang++  CXX1X=/usr/local/opt/llvm/bin/clang++  LDFLAGS=-L/usr/local/opt/llvm/lib -o task -fopenmp library(\"devtools\") install_github(\"JingyuHe/XBART\")"},{"path":"https://github.com/fasrc/CRE/articles/CRE.html","id":"how-to-install-the-xbcf-package","dir":"Articles","previous_headings":"Installation","what":"How to install the XBCF package:","title":"CRE","text":"R, run:","code":"library(devtools) install_github(\"socket778/XBCF\")"},{"path":"https://github.com/fasrc/CRE/articles/CRE.html","id":"install-the-cre-package-from-github","dir":"Articles","previous_headings":"Installation","what":"Install the CRE package from GitHub:","title":"CRE","text":"R, run:","code":"library(\"devtools\") install_github(\"fasrc/CRE\") library(CRE)"},{"path":[]},{"path":"https://github.com/fasrc/CRE/articles/CRE.html","id":"users-need-to-call-only-one-function-in-the-cre-package-to-conduct-subgroup-analysis-cre-","dir":"Articles","previous_headings":"Usage","what":"Users need to call only one function in the CRE package to conduct subgroup analysis: cre().","title":"CRE","text":"cre() inputs asked user follows: y observed response vector z treatment vector X features matrix ratio_dis ratio data discovery subsample ite_method_dis method estimate discovery sample ITE (1) include_ps_dis whether include propensity score estimate discovery ITE estimation (2) ps_method_dis estimation model propensity score discovery subsample or_method_dis or_method_dis estimation model outcome regressions estimate_ite_aipw discovery subsample ite_method_inf method estimate inference sample ITE (1) include_ps_inf whether include propensity score estimate inference ITE estimation (2) ps_method_inf estimation model propensity score inference subsample or_method_inf or_method_dis estimation model outcome regressions estimate_ite_aipw inference subsample ntrees_rf number decision trees random forests ntrees_gbm number decision trees gradient boosting min_nodes minimum size trees’ terminal nodes max_nodes maximum size trees’ terminal nodes t common support used generating causal rules matrix q selection threshold used selecting causal rules rules_method method selecting causal rules binary outcomes, either “conservative”, “anticonservative”, NA (continuous) include_offset whether include offset estimating ITE, poisson offset_name name offset, included cate_method method estimate CATE values cate_SL_library library used cate_method set DRLearner filter_cate whether filter rules p-value <= 0.05","code":""},{"path":"https://github.com/fasrc/CRE/articles/CRE.html","id":"a-note-on-the-parameters","dir":"Articles","previous_headings":"Usage","what":"A note on the parameters","title":"CRE","text":"(1) Options ITE estimation follows: Inverse Propensity Weighting (ipw) Stabilized Inverse Propensity Weighting (sipw) Augmented Inverse Propensity Weighting (aipw) Outcome Regression () Bayesian Additive Regression Trees (bart) Accelerated Bayesian Additive Regression Trees (xbart) Bayesian Causal Forests (bcf) Accelerated Bayesian Causal Forests (xbcf) Causal Forests (cf) Poisson Regression (poisson) original paper Lee et al. (2020), several methods tested imputation ITE continuous outcomes consequent ability correctly discover causal rules precisely estimate conditional effects within rules. refer paper details best performing techniques. data continuous outcomes, rule thumb, suggest usage bcf, shown consistent performance across different simulated scenarios. data binary outcomes, suggest using , bart, xbart cf. ipw, sipw, bcf, xbcf ITE estimation methods compatible binary outcomes. (2) include_ps_dis include_ps_inf arguments considered ITE method selected bart, xbart, cf.","code":""},{"path":"https://github.com/fasrc/CRE/articles/CRE.html","id":"cre-example","dir":"Articles","previous_headings":"Usage","what":"CRE Example:","title":"CRE","text":"","code":"library(CRE) # expected output: matrix of CATE estimates cre_results <- cre(y = abs(dataset_cont[[\"y\"]]), z = dataset_cont[[\"z\"]],                    X = as.data.frame(dataset_cont[[\"X\"]]), ratio_dis 0.25,                    ite_method_dis = \"bcf\", include_ps_dis = NA,                    ps_method_dis = \"SL.xgboost\", or_method_dis = NA,                    ite_method_inf = \"bcf, include_ps_inf = NA,                    ps_method_inf = \"SL.xgboost\", or_method_dis = NA,                    ntrees_rf = 100, ntrees_gbm = 50, min_nodes = 20,                    max_nodes = 5, t = 0.025, q = 0.8, rules_method = NA,                    include_offset = FALSE, offset_name = NA,                    cate_method = \"cf-means\", cate_SL_library = NA,                    filter_cate = FALSE)"},{"path":[]},{"path":"https://github.com/fasrc/CRE/articles/CRE.html","id":"running-examples","dir":"Articles","previous_headings":"Testing the Package, Examples, and Discussion","what":"Running Examples","title":"CRE","text":"can use causal inference studies data test package. database needs following attributes: y: Output vector z: Treatment vector X: Covariate matrix CRE package can generate synthetic data can used test different features package. current implementation, code can generate data continuous binary outcomes. following, present reproducible examples can copy build upon.","code":""},{"path":"https://github.com/fasrc/CRE/articles/CRE.html","id":"generating-synthetic-data-with-continuous-outcomes","dir":"Articles","previous_headings":"Testing the Package, Examples, and Discussion","what":"Generating Synthetic Data with Continuous Outcomes","title":"CRE","text":"","code":"library(\"CRE\") dataset_cont <- generate_cre_dataset(n = 1000, rho = 0, n_rules = 2, p = 10,                                      effect_size = 0.5, binary = FALSE, seed = 2021)  str(dataset_cont) ## List of 3 # $ y: num [1:1000] 2.72 2.79 3.2 2.53 2.49 ... # $ z: int [1:1000] 0 0 1 1 1 1 0 1 0 0 ... # $ X: num [1:1000, 1:10] 1 1 1 0 0 0 0 1 1 0 ... #  ..- attr(*, \"dimnames\")=List of 2 #  .. ..$ : NULL #  .. ..$ : chr [1:10] \"X1\" \"X2\" \"X3\" \"X4\" ..."},{"path":"https://github.com/fasrc/CRE/articles/CRE.html","id":"generating-synthetic-data-with-binary-outcomes","dir":"Articles","previous_headings":"Testing the Package, Examples, and Discussion","what":"Generating Synthetic Data with Binary Outcomes","title":"CRE","text":"","code":"library(\"CRE\") dataset_binary <- generate_cre_dataset(n = 1000, rho = 0, n_rules = 2, p = 10,                                        effect_size = 0.5, binary = TRUE, seed = 2021)  str(dataset_binary) ## List of 3 # $ y: num [1:1000] 1 0.5 0 0 1.5 1 1 1 -0.5 0 ... # $ z: int [1:1000] 0 1 0 0 1 0 0 0 1 0 ... # $ X: num [1:1000, 1:10] 1 1 1 0 0 0 0 1 1 0 ... #  ..- attr(*, \"dimnames\")=List of 2 #  .. ..$ : NULL #  .. ..$ : chr [1:10] \"X1\" \"X2\" \"X3\" \"X4\" ..."},{"path":"https://github.com/fasrc/CRE/articles/CRE.html","id":"running-the-cre-on-synthetic-data-with-continuous-outcomes","dir":"Articles","previous_headings":"Testing the Package, Examples, and Discussion","what":"Running the CRE on Synthetic Data with Continuous Outcomes","title":"CRE","text":"following example, first generate 1000 synthetic data samples, feed cre() function generate select causal rules CATE estimates. can read different arguments documentation (?cre). summary: want run code delegating 25% data discovery subsample 75% inference (ratio_dis <- 0.25) discovery subsample, want estimate Individual Treatment effect using XBART method, including estimated propensity score covariate (ite_method_dis <- \"xbart\" include_ps_dis <- TRUE) inference subsample, want estimate Individual Treatment effect using XBCF method, automatically includes estimated propensity score covariate (ite_method_inf <- \"xbcf\" include_ps_inf <- NA) causal rule generation, want generate 100 decision trees minimum node size 20 maximum node size 5 (ntrees <- 100, min_nodes <- 20, max_nodes <- 5) trimming causal rules, want use common support value 0.025 (t <- 0.025) selecting important causal rules, want use selection threshold 0.8 (q <- 0.08) Since ’re using binary outcomes first example, specify rules method (rules_method <- NA) Since ’re using Poisson regression, specify offset (include_offset <- FALSE, offset_name = NA)","code":"# Load package library(\"CRE\") # Generate synthetic data with continuous outcomes dataset <- generate_cre_dataset(n = 1000, rho = 0, n_rules = 2, p = 10                                 effect_size = 0.5, binary = FALSE, seed = 2021)   # Set parameters y <- dataset[[\"y\"]] z <- dataset[[\"z\"]] X <- dataset[[\"X\"]] ratio_dis <- 0.25 ite_method_dis <- \"bcf\" include_ps_dis <- \"TRUE\" ps_method_dis <- \"SL.xgboost\" or_method_dis <- NA ite_method_inf <- \"bcf\" include_ps_inf <- NA ps_method_inf <- \"SL.xgboost\" or_method_inf <- NA ntrees <- 100 min_nodes <- 20 max_nodes <- 5 t <- 0.025 q <- 0.8 rules_method <- NA include_offset <- FALSE offset_name <- NA cate_method <- \"cf-means\" cate_SL_library <- NA filter_cate <- FALSE  # Run CRE method cre_results <- cre(y, z, X, ratio_dis, ite_method_dis, include_ps_dis,                    ps_method_dis, or_method_dis, ite_method_inf, include_ps_inf,                     ps_method_inf, or_method_inf, ntrees, min_nodes, max_nodes,                     t, q, rules_method, include_offset, offset_name,                    cate_method, cate_SL_library, filter_cate)"},{"path":"https://github.com/fasrc/CRE/articles/CRE.html","id":"running-the-cre-on-synthetic-data-with-binary-outcomes","dir":"Articles","previous_headings":"Testing the Package, Examples, and Discussion","what":"Running the CRE on Synthetic Data with Binary Outcomes","title":"CRE","text":"run CRE method synthetic data binary outcomes, set binary argument generate_cre_dataset TRUE, specify rules_method parameter. addition, make sure ITE estimation methods selected compatible binary outcomes (see ).","code":""},{"path":"https://github.com/fasrc/CRE/articles/Contribution.html","id":"environment-setup","dir":"Articles","previous_headings":"","what":"Environment Setup","title":"Contribution","text":"Please follow steps get copy CRE Github account. Navigate CRE Github repository, top right corner, click Fork button. add clone project Github account. Open terminal (Gitbash Windows, Anaconda prompt, …) run following command (brackets included): already SSH key, need generate one. Read . Now, can modify codebase track modification. good idea create new branch work codebase. Read following instructions git branching.","code":"git clone git@github.com:[your user name]/CRE.git"},{"path":"https://github.com/fasrc/CRE/articles/Contribution.html","id":"git-branching-model","dir":"Articles","previous_headings":"","what":"Git Branching Model","title":"Contribution","text":"Although, personal repository, can pick branch name, however, order keep consistency also understand working , following convention strongly recommended. project, follow convention proposed Vincent Driessen successful Git branching model post.","code":""},{"path":"https://github.com/fasrc/CRE/articles/Contribution.html","id":"where-to-submit-pull-requests","dir":"Articles","previous_headings":"","what":"Where to submit pull requests?","title":"Contribution","text":"pull requests submitted base repository: fasrc/CRE base: develop branch.","code":""},{"path":"https://github.com/fasrc/CRE/articles/Contribution.html","id":"pull-request-checklist","dir":"Articles","previous_headings":"","what":"Pull request checklist","title":"Contribution","text":"Please run devtools::document(), devtools::load_all() final modifications. Make sure modified code passes checks tests (can run devtools::check() RStudio) PR pass CI reviews can merge . Add line(s) modification NEWS.md file. adding new features, please make sure appropriate documentation added updated. Please clean white spaces. Read .","code":""},{"path":"https://github.com/fasrc/CRE/articles/Contribution.html","id":"reporting-bugs","dir":"Articles","previous_headings":"","what":"Reporting bugs","title":"Contribution","text":"Please report potential bugs creating new issue sending us email. Please include following information bug report: brief description , expected happen, happened. OS using whether using personal computer HPC cluster. version package installed.","code":""},{"path":"https://github.com/fasrc/CRE/articles/Contribution.html","id":"style-guide","dir":"Articles","previous_headings":"","what":"Style Guide","title":"Contribution","text":"project, follow tidyverse style guide.","code":""},{"path":[]},{"path":"https://github.com/fasrc/CRE/articles/Contribution.html","id":"names","dir":"Articles","previous_headings":"Style Guide > Summary","what":"Names","title":"Contribution","text":"File names snake_case ends .R (e.g., create_matching.R) variable names small letter separate _ need (e.g., delta_n) Function names follow snake_case style (e.g., generate_data) Function names follow verb+output convention (e.g., compute_resid)","code":""},{"path":"https://github.com/fasrc/CRE/articles/Contribution.html","id":"spaces-and-indentation","dir":"Articles","previous_headings":"Style Guide > Summary","what":"Spaces and Indentation","title":"Contribution","text":"Indentations two spaces (use tab) Place space around binary operators (e.g., x + y) Place space comma Place space # commenting avoid multiple ### put space opening closing parenthesis Place space () used , , .","code":"#Acceptable: z <- x + y #Not recommended: z<-x+y # (no space) z<- x+y z<-x +y #Acceptable: a <- matrix(c(1:100), nrow = 5) #Not recommended: a <- matrix(c(1:100),nrow = 5) # (no space after comma) a <- matrix( c(1:100), nrow = 5 ) # (extra space after and before parentheses) a<-matrix(c(1:100), nrow = 5) # (no space around unary operator <- ) #Acceptable: # This is a comment #Not recommended: #This is a comment #    This is a comment (more than one space after #) ## This is a comment (multiple #) ###    This is a comment (multiple # and more than one space) #Acceptable: x <- (z + y) #Not recommended: x <- ( z + y ) # (unnecessary space) x <- (z + y ) x <- ( z + y) #Acceptible if (x > 2) {   print(x) } # Not recommended if(x > 2){   print(x) }"},{"path":"https://github.com/fasrc/CRE/articles/Contribution.html","id":"other-notes","dir":"Articles","previous_headings":"Style Guide > Summary","what":"Other notes","title":"Contribution","text":"Maximum line length 80 character Use explicit returns Use explicit tags documentation (e.g., @title, @description, …)","code":""},{"path":"https://github.com/fasrc/CRE/articles/Testing-the-Package.html","id":"getting-the-code","dir":"Articles","previous_headings":"","what":"Getting the code","title":"Testing the CRE Package","text":"test package, please install package system (R (>= 3.5.0)). can install package following one approaches: Directly GitHub CRAN (recommended) Source Forked Repository (recommended)","code":""},{"path":"https://github.com/fasrc/CRE/articles/Testing-the-Package.html","id":"installing-the-package-directly-from-github","dir":"Articles","previous_headings":"Getting the code","what":"Installing the package directly from Github","title":"Testing the CRE Package","text":"project, follow successful Git Branching Model. result, develop branch updated branch developers. Use devtools::install_github install package. specify ref, install master (main) branch. Try ?CRE. open package description page help tab (assuming using RStudio).","code":"library(devtools) try(detach(\"package:CRE\", unload = TRUE), silent = TRUE) # if already you have the package, detach and unload it, to have a new install.  install_github(\"fasrc/CRE\", ref=\"develop\") library(CRE)"},{"path":"https://github.com/fasrc/CRE/articles/Testing-the-Package.html","id":"installing-the-package-from-cran","dir":"Articles","previous_headings":"Getting the code","what":"Installing the package from CRAN","title":"Testing the CRE Package","text":"Installing package CRAN developing purposes recommended. probably, version CRAN latest version. [Complete section submitting package CRAN]","code":""},{"path":"https://github.com/fasrc/CRE/articles/Testing-the-Package.html","id":"installing-the-package-from-the-source","dir":"Articles","previous_headings":"Getting the code","what":"Installing the package from the source","title":"Testing the CRE Package","text":"order install package source, need download source code computer install source. steps: Go package Github repository drop-menu change branch develop. click Code tab click Download Zip tab. Open one files using RStudio, change project directory project directory (Session > Set Working Directory > Project Directory). Load devtools library load CRE.","code":"library(devtools) load_all() ?CRE"},{"path":"https://github.com/fasrc/CRE/articles/Testing-the-Package.html","id":"forking-the-package","dir":"Articles","previous_headings":"Getting the code","what":"Forking the package","title":"Testing the CRE Package","text":"Forking package Github account best option planning installing, testing, modifying, contributing project. Go package Github repository click Fork button top right corner. forking package, Open terminal (Gitbash Windows, Anaconda prompt, …) run following command (brackets included): Now, can modify codebase track modification. Navigate package folder Install package following Installing package source steps. good idea create new branch work codebase. Read successful Git Branching Model branching convention.","code":"git clone git@github.com:[your user name]/CRE.git"},{"path":"https://github.com/fasrc/CRE/articles/Testing-the-Package.html","id":"testing-the-package","dir":"Articles","previous_headings":"","what":"Testing the Package","title":"Testing the CRE Package","text":"Run following command test package.","code":"library(CRE)  # Generate sample data set.seed(2021) dataset_cont <- generate_cre_dataset(n = 1000, rho = 0, n_rules = 2, p = 10,                                      effect_size = 2, binary = FALSE) y <- dataset_cont[[\"y\"]] z <- dataset_cont[[\"z\"]] X <- as.data.frame(dataset_cont[[\"X\"]]) X_names <- names(as.data.frame(X))   # Run parameters ratio_dis <- 0.25 ntrees_rf <- 100 ntrees_gbm <- 50 min_nodes <- 20 max_nodes <- 5 t <- 0.025 q <- 0.8 rules_method <- NA include_offset <- FALSE offset_name <- NA filter_cate <- FALSE  # Poisson CATE estimation with Poisson ITE estimation print(\"Testing Poisson CATE estimation with Poisson ITE estimation\") #> [1] \"Testing Poisson CATE estimation with Poisson ITE estimation\" cre_results_1 <- cre(y = abs(y), z, X, ratio_dis, ite_method_dis = \"poisson\",                      include_ps_dis = NA, ps_method_dis = \"SL.xgboost\",                      or_method_dis = NA, ite_method_inf = \"poisson\",                      include_ps_inf = NA, ps_method_inf = \"SL.xgboost\",                      or_method_inf = NA, ntrees_rf, ntrees_gbm, min_nodes,                      max_nodes, t, q, rules_method, include_offset, offset_name,                      cate_method = \"poisson\", cate_SL_library = NA) #> Registered S3 method overwritten by 'RRF': #>   method      from         #>   plot.margin randomForest #> 388 rules (length<=15) were extracted from the first 100 trees. #> 150 rules (length<=15) were extracted from the first 50 trees. #> Conducting Inference Subsample Analysis  cre_results_1[[\"CATE_results\"]][,1] #>  [1] \"(Intercept)\"                           #>  [2] \"treatment\"                             #>  [3] \"treatment:x1<=0.5 & x2<=0.5\"           #>  [4] \"treatment:x2<=0.5\"                     #>  [5] \"treatment:x1<=0.5 & x8>0.5\"            #>  [6] \"treatment:x3<=0.5 & x4<=0.5\"           #>  [7] \"treatment:x10<=0.5\"                    #>  [8] \"treatment:x9<=0.5\"                     #>  [9] \"treatment:x2>0.5 & x7<=0.5\"            #> [10] \"treatment:x1<=0.5 & x6>0.5 & x7<=0.5\"  #> [11] \"treatment:x2<=0.5 & x5>0.5\"            #> [12] \"treatment:x4>0.5 & x5>0.5 & x7<=0.5\"   #> [13] \"treatment:x1>0.5 & x5<=0.5 & x7<=0.5\"  #> [14] \"treatment:x1<=0.5 & x2<=0.5 & x6<=0.5\" #> [15] \"treatment:x2<=0.5 & x8>0.5\"            #> [16] \"treatment:x3<=0.5 & x8>0.5\"            #> [17] \"treatment:x2>0.5 & x5>0.5\"             #> [18] \"treatment:x1<=0.5 & x4<=0.5\"           #> [19] \"treatment:x1<=0.5 & x4<=0.5 & x6<=0.5\" #> [20] \"treatment:x2<=0.5 & x8>0.5 & x9<=0.5\"  #> [21] \"treatment:x1<=0.5 & x3<=0.5 & x6<=0.5\" #> [22] \"treatment:x1<=0.5 & x9<=0.5\"           #> [23] \"treatment:x2<=0.5 & x5>0.5 & x8<=0.5\"  #> [24] \"treatment:x2<=0.5 & x3<=0.5 & x5>0.5\"  #> [25] \"treatment:x1>0.5 & x4>0.5 & x6<=0.5\"   #> [26] \"treatment:x1>0.5 & x5<=0.5 & x9<=0.5\"  #> [27] \"treatment:x2>0.5 & x3>0.5\"             #> [28] \"treatment:x4>0.5 & x5>0.5\"             #> [29] \"treatment:x1>0.5 & x6>0.5\"             #> [30] \"treatment:x1>0.5 & x3>0.5\"             #> [31] \"treatment:x1<=0.5 & x5>0.5 & x8<=0.5\"  #> [32] \"treatment:x3>0.5 & x4>0.5 & x10>0.5\"   #> [33] \"treatment:x1>0.5 & x4>0.5 & x5<=0.5\"   #> [34] \"treatment:x2>0.5 & x9>0.5\"             #> [35] \"treatment:x2>0.5 & x5<=0.5 & x8<=0.5\"  #> [36] \"treatment:x2>0.5 & x6>0.5\"             #> [37] \"treatment:x4>0.5\"                      #> [38] \"treatment:x3>0.5 & x4>0.5\"             #> [39] \"treatment:x1>0.5 & x8<=0.5\"            #> [40] \"treatment:x6>0.5\"                      #> [41] \"treatment:x1>0.5 & x2>0.5\"             #> [42] \"x1\"                                    #> [43] \"x2\"                                    #> [44] \"x3\"                                    #> [45] \"x4\"                                    #> [46] \"x5\"                                    #> [47] \"x6\"                                    #> [48] \"x7\"                                    #> [49] \"x8\"                                    #> [50] \"x9\"                                    #> [51] \"x10\" cre_results_1[[\"CATE_results\"]][,1] #>  [1] \"(Intercept)\"                           #>  [2] \"treatment\"                             #>  [3] \"treatment:x1<=0.5 & x2<=0.5\"           #>  [4] \"treatment:x2<=0.5\"                     #>  [5] \"treatment:x1<=0.5 & x8>0.5\"            #>  [6] \"treatment:x3<=0.5 & x4<=0.5\"           #>  [7] \"treatment:x10<=0.5\"                    #>  [8] \"treatment:x9<=0.5\"                     #>  [9] \"treatment:x2>0.5 & x7<=0.5\"            #> [10] \"treatment:x1<=0.5 & x6>0.5 & x7<=0.5\"  #> [11] \"treatment:x2<=0.5 & x5>0.5\"            #> [12] \"treatment:x4>0.5 & x5>0.5 & x7<=0.5\"   #> [13] \"treatment:x1>0.5 & x5<=0.5 & x7<=0.5\"  #> [14] \"treatment:x1<=0.5 & x2<=0.5 & x6<=0.5\" #> [15] \"treatment:x2<=0.5 & x8>0.5\"            #> [16] \"treatment:x3<=0.5 & x8>0.5\"            #> [17] \"treatment:x2>0.5 & x5>0.5\"             #> [18] \"treatment:x1<=0.5 & x4<=0.5\"           #> [19] \"treatment:x1<=0.5 & x4<=0.5 & x6<=0.5\" #> [20] \"treatment:x2<=0.5 & x8>0.5 & x9<=0.5\"  #> [21] \"treatment:x1<=0.5 & x3<=0.5 & x6<=0.5\" #> [22] \"treatment:x1<=0.5 & x9<=0.5\"           #> [23] \"treatment:x2<=0.5 & x5>0.5 & x8<=0.5\"  #> [24] \"treatment:x2<=0.5 & x3<=0.5 & x5>0.5\"  #> [25] \"treatment:x1>0.5 & x4>0.5 & x6<=0.5\"   #> [26] \"treatment:x1>0.5 & x5<=0.5 & x9<=0.5\"  #> [27] \"treatment:x2>0.5 & x3>0.5\"             #> [28] \"treatment:x4>0.5 & x5>0.5\"             #> [29] \"treatment:x1>0.5 & x6>0.5\"             #> [30] \"treatment:x1>0.5 & x3>0.5\"             #> [31] \"treatment:x1<=0.5 & x5>0.5 & x8<=0.5\"  #> [32] \"treatment:x3>0.5 & x4>0.5 & x10>0.5\"   #> [33] \"treatment:x1>0.5 & x4>0.5 & x5<=0.5\"   #> [34] \"treatment:x2>0.5 & x9>0.5\"             #> [35] \"treatment:x2>0.5 & x5<=0.5 & x8<=0.5\"  #> [36] \"treatment:x2>0.5 & x6>0.5\"             #> [37] \"treatment:x4>0.5\"                      #> [38] \"treatment:x3>0.5 & x4>0.5\"             #> [39] \"treatment:x1>0.5 & x8<=0.5\"            #> [40] \"treatment:x6>0.5\"                      #> [41] \"treatment:x1>0.5 & x2>0.5\"             #> [42] \"x1\"                                    #> [43] \"x2\"                                    #> [44] \"x3\"                                    #> [45] \"x4\"                                    #> [46] \"x5\"                                    #> [47] \"x6\"                                    #> [48] \"x7\"                                    #> [49] \"x8\"                                    #> [50] \"x9\"                                    #> [51] \"x10\" # DRLearner CATE estimation with AIPW ITE estimation print(\"Testing DRLearner CATE estimation with AIPW ITE estimation\") #> [1] \"Testing DRLearner CATE estimation with AIPW ITE estimation\" cre_results_2 <- cre(y, z, X, ratio_dis, ite_method_dis = \"aipw\",                      include_ps_dis = NA, ps_method_dis = \"SL.xgboost\",                      or_method_dis = \"SL.xgboost\", ite_method_inf = \"aipw\",                      include_ps_inf = NA, ps_method_inf = \"SL.xgboost\",                      or_method_inf = \"SL.xgboost\", ntrees_rf, ntrees_gbm,                      min_nodes, max_nodes, t, q, rules_method,                      include_offset, offset_name, cate_method = \"DRLearner\",                      cate_SL_library = \"SL.xgboost\") #> Loading required package: nnls #> 495 rules (length<=15) were extracted from the first 100 trees. #> 338 rules (length<=15) were extracted from the first 50 trees. #> Conducting Inference Subsample Analysis  cre_results_2[[\"CATE_results\"]][,1] #>  [1] \"(Treatment)\"                           #>  [2] \"x1<=0.5 & x2<=0.5 & x8>0.5\"            #>  [3] \"x2<=0.5 & x3>0.5 & x10<=0.5\"           #>  [4] \"x6>0.5 & x10<=0.5\"                     #>  [5] \"x1<=0.5 & x2<=0.5\"                     #>  [6] \"x8<=0.5 & x10<=0.5\"                    #>  [7] \"x2>0.5 & x8<=0.5 & x10<=0.5\"           #>  [8] \"x1<=0.5 & x2<=0.5 & x9>0.5\"            #>  [9] \"x2<=0.5 & x7>0.5\"                      #> [10] \"x2>0.5 & x3<=0.5 & x10>0.5\"            #> [11] \"x1>0.5 & x9<=0.5 & x10<=0.5\"           #> [12] \"x3<=0.5 & x8<=0.5\"                     #> [13] \"x2<=0.5 & x10>0.5\"                     #> [14] \"x1<=0.5 & x5<=0.5\"                     #> [15] \"x5>0.5 & x10<=0.5\"                     #> [16] \"x1<=0.5 & x2<=0.5 & x10<=0.5\"          #> [17] \"x1>0.5 & x6>0.5\"                       #> [18] \"x7>0.5\"                                #> [19] \"x2<=0.5 & x4<=0.5 & x6<=0.5\"           #> [20] \"x6>0.5 & x7<=0.5\"                      #> [21] \"x1<=0.5 & x2<=0.5 & x5<=0.5 & x8<=0.5\" #> [22] \"x2>0.5 & x3<=0.5 & x8<=0.5\"            #> [23] \"x1>0.5 & x2<=0.5 & x5>0.5\"             #> [24] \"x2<=0.5 & x4<=0.5 & x6<=0.5 & x10>0.5\" #> [25] \"x1>0.5 & x3<=0.5 & x10>0.5\"            #> [26] \"x1<=0.5 & x2>0.5 & x4>0.5 & x10<=0.5\"  #> [27] \"x1>0.5 & x3<=0.5 & x4<=0.5 & x8<=0.5\"  #> [28] \"x1<=0.5 & x3<=0.5 & x8<=0.5\"           #> [29] \"x1>0.5 & x2<=0.5 & x4<=0.5 & x10>0.5\"  #> [30] \"x1>0.5 & x2>0.5 & x3<=0.5\"             #> [31] \"x1<=0.5 & x2<=0.5 & x3<=0.5 & x7>0.5\"  #> [32] \"x3<=0.5 & x4<=0.5 & x6<=0.5 & x10>0.5\" #> [33] \"x2<=0.5 & x4<=0.5 & x8<=0.5\"           #> [34] \"x1<=0.5 & x3<=0.5 & x6<=0.5 & x10>0.5\" #> [35] \"x2<=0.5 & x8<=0.5 & x9<=0.5\"           #> [36] \"x1<=0.5 & x2<=0.5 & x4<=0.5 & x10>0.5\" #> [37] \"x1>0.5 & x7<=0.5 & x8>0.5\"             #> [38] \"x2>0.5 & x9<=0.5\"                      #> [39] \"x5>0.5 & x7>0.5 & x10<=0.5\"            #> [40] \"x4>0.5 & x8<=0.5\"                      #> [41] \"x1>0.5 & x8<=0.5\"                      #> [42] \"x10<=0.5\"                              #> [43] \"x2<=0.5 & x4<=0.5 & x9<=0.5\"           #> [44] \"x1>0.5 & x2>0.5 & x3>0.5 & x9>0.5\"     #> [45] \"x3<=0.5 & x4<=0.5\"                     #> [46] \"x1>0.5 & x3<=0.5 & x7<=0.5\"            #> [47] \"x2>0.5 & x3>0.5 & x6<=0.5 & x9<=0.5\"   #> [48] \"x1>0.5\"                                #> [49] \"x2>0.5 & x3>0.5 & x9>0.5\"              #> [50] \"x1>0.5 & x2<=0.5 & x9>0.5\"             #> [51] \"x2>0.5 & x3>0.5\" cre_results_2[[\"CATE_results\"]][,1] #>  [1] \"(Treatment)\"                           #>  [2] \"x1<=0.5 & x2<=0.5 & x8>0.5\"            #>  [3] \"x2<=0.5 & x3>0.5 & x10<=0.5\"           #>  [4] \"x6>0.5 & x10<=0.5\"                     #>  [5] \"x1<=0.5 & x2<=0.5\"                     #>  [6] \"x8<=0.5 & x10<=0.5\"                    #>  [7] \"x2>0.5 & x8<=0.5 & x10<=0.5\"           #>  [8] \"x1<=0.5 & x2<=0.5 & x9>0.5\"            #>  [9] \"x2<=0.5 & x7>0.5\"                      #> [10] \"x2>0.5 & x3<=0.5 & x10>0.5\"            #> [11] \"x1>0.5 & x9<=0.5 & x10<=0.5\"           #> [12] \"x3<=0.5 & x8<=0.5\"                     #> [13] \"x2<=0.5 & x10>0.5\"                     #> [14] \"x1<=0.5 & x5<=0.5\"                     #> [15] \"x5>0.5 & x10<=0.5\"                     #> [16] \"x1<=0.5 & x2<=0.5 & x10<=0.5\"          #> [17] \"x1>0.5 & x6>0.5\"                       #> [18] \"x7>0.5\"                                #> [19] \"x2<=0.5 & x4<=0.5 & x6<=0.5\"           #> [20] \"x6>0.5 & x7<=0.5\"                      #> [21] \"x1<=0.5 & x2<=0.5 & x5<=0.5 & x8<=0.5\" #> [22] \"x2>0.5 & x3<=0.5 & x8<=0.5\"            #> [23] \"x1>0.5 & x2<=0.5 & x5>0.5\"             #> [24] \"x2<=0.5 & x4<=0.5 & x6<=0.5 & x10>0.5\" #> [25] \"x1>0.5 & x3<=0.5 & x10>0.5\"            #> [26] \"x1<=0.5 & x2>0.5 & x4>0.5 & x10<=0.5\"  #> [27] \"x1>0.5 & x3<=0.5 & x4<=0.5 & x8<=0.5\"  #> [28] \"x1<=0.5 & x3<=0.5 & x8<=0.5\"           #> [29] \"x1>0.5 & x2<=0.5 & x4<=0.5 & x10>0.5\"  #> [30] \"x1>0.5 & x2>0.5 & x3<=0.5\"             #> [31] \"x1<=0.5 & x2<=0.5 & x3<=0.5 & x7>0.5\"  #> [32] \"x3<=0.5 & x4<=0.5 & x6<=0.5 & x10>0.5\" #> [33] \"x2<=0.5 & x4<=0.5 & x8<=0.5\"           #> [34] \"x1<=0.5 & x3<=0.5 & x6<=0.5 & x10>0.5\" #> [35] \"x2<=0.5 & x8<=0.5 & x9<=0.5\"           #> [36] \"x1<=0.5 & x2<=0.5 & x4<=0.5 & x10>0.5\" #> [37] \"x1>0.5 & x7<=0.5 & x8>0.5\"             #> [38] \"x2>0.5 & x9<=0.5\"                      #> [39] \"x5>0.5 & x7>0.5 & x10<=0.5\"            #> [40] \"x4>0.5 & x8<=0.5\"                      #> [41] \"x1>0.5 & x8<=0.5\"                      #> [42] \"x10<=0.5\"                              #> [43] \"x2<=0.5 & x4<=0.5 & x9<=0.5\"           #> [44] \"x1>0.5 & x2>0.5 & x3>0.5 & x9>0.5\"     #> [45] \"x3<=0.5 & x4<=0.5\"                     #> [46] \"x1>0.5 & x3<=0.5 & x7<=0.5\"            #> [47] \"x2>0.5 & x3>0.5 & x6<=0.5 & x9<=0.5\"   #> [48] \"x1>0.5\"                                #> [49] \"x2>0.5 & x3>0.5 & x9>0.5\"              #> [50] \"x1>0.5 & x2<=0.5 & x9>0.5\"             #> [51] \"x2>0.5 & x3>0.5\" # CF-means CATE estimation with BCF ITE estimation print(\"Testing CF-means CATE estimation with BCF ITE estimation\") #> [1] \"Testing CF-means CATE estimation with BCF ITE estimation\" cre_results_3 <- cre(y, z, X, ratio_dis, ite_method_dis = \"bcf\",                      include_ps_dis = NA, ps_method_dis = \"SL.xgboost\",                      or_method_dis = NA, ite_method_inf = \"bcf\",                      include_ps_inf = NA, ps_method_inf = \"SL.xgboost\",                      or_method_inf = NA, ntrees_rf, ntrees_gbm, min_nodes,                      max_nodes, t, q, rules_method, include_offset, offset_name,                      cate_method = \"cf-means\", cate_SL_library = NA) #> Using 11 control variables. #> Using 10 potential effect moderators. #>  #> Beginning MCMC: #> iteration: 0 sigma: 1 #> iteration: 100 sigma: 0.807375 #> iteration: 200 sigma: 0.762476 #> iteration: 300 sigma: 0.712555 #> iteration: 400 sigma: 0.824439 #> iteration: 500 sigma: 0.734347 #> iteration: 600 sigma: 0.832051 #> iteration: 700 sigma: 0.789607 #> iteration: 800 sigma: 0.806984 #> iteration: 900 sigma: 0.768011 #> time for loop: 3 #> 445 rules (length<=15) were extracted from the first 100 trees. #> 150 rules (length<=15) were extracted from the first 50 trees. #> Conducting Inference Subsample Analysis #> Using 11 control variables. #> Using 10 potential effect moderators. #>  #> Beginning MCMC: #> iteration: 0 sigma: 1 #> iteration: 100 sigma: 0.684726 #> iteration: 200 sigma: 0.681797 #> iteration: 300 sigma: 0.710953 #> iteration: 400 sigma: 0.692591 #> iteration: 500 sigma: 0.714221 #> iteration: 600 sigma: 0.690991 #> iteration: 700 sigma: 0.664053 #> iteration: 800 sigma: 0.72243 #> iteration: 900 sigma: 0.696119 #> time for loop: 9  cre_results_3[[\"CATE_results\"]][,1] #>  [1] \"Average Treatment Effect\"    \"x1<=0.5 & x2<=0.5\"           #>  [3] \"x9<=0.5\"                     \"x2<=0.5 & x5>0.5\"            #>  [5] \"x4>0.5 & x9<=0.5\"            \"x7<=0.5 & x9<=0.5\"           #>  [7] \"x1<=0.5 & x2<=0.5 & x9<=0.5\" \"x5>0.5 & x9<=0.5\"            #>  [9] \"x8<=0.5 & x9<=0.5\"           \"x2<=0.5 & x3>0.5 & x8>0.5\"   #> [11] \"x1>0.5 & x3<=0.5\"            \"x2>0.5 & x9>0.5\"             #> [13] \"x3<=0.5 & x9>0.5\"            \"x4<=0.5 & x8>0.5\"            #> [15] \"x2>0.5 & x3>0.5 & x9>0.5\"    \"x1>0.5 & x9>0.5\"             #> [17] \"x3<=0.5\"                     \"x7>0.5 & x9>0.5\"             #> [19] \"x5<=0.5\"                     \"x4<=0.5 & x9>0.5\"            #> [21] \"x2>0.5 & x5<=0.5\"            \"x1>0.5\"                      #> [23] \"x2>0.5 & x3>0.5\" cre_results_3[[\"CATE_results\"]][,1] #>  [1] \"Average Treatment Effect\"    \"x1<=0.5 & x2<=0.5\"           #>  [3] \"x9<=0.5\"                     \"x2<=0.5 & x5>0.5\"            #>  [5] \"x4>0.5 & x9<=0.5\"            \"x7<=0.5 & x9<=0.5\"           #>  [7] \"x1<=0.5 & x2<=0.5 & x9<=0.5\" \"x5>0.5 & x9<=0.5\"            #>  [9] \"x8<=0.5 & x9<=0.5\"           \"x2<=0.5 & x3>0.5 & x8>0.5\"   #> [11] \"x1>0.5 & x3<=0.5\"            \"x2>0.5 & x9>0.5\"             #> [13] \"x3<=0.5 & x9>0.5\"            \"x4<=0.5 & x8>0.5\"            #> [15] \"x2>0.5 & x3>0.5 & x9>0.5\"    \"x1>0.5 & x9>0.5\"             #> [17] \"x3<=0.5\"                     \"x7>0.5 & x9>0.5\"             #> [19] \"x5<=0.5\"                     \"x4<=0.5 & x9>0.5\"            #> [21] \"x2>0.5 & x5<=0.5\"            \"x1>0.5\"                      #> [23] \"x2>0.5 & x3>0.5\" plot(cre_results_3) cre_results_4 <- cre(y, z, X, ratio_dis, ite_method_dis = \"bart\",                      include_ps_dis = TRUE, ps_method_dis = \"SL.xgboost\",                      or_method_dis = NA, ite_method_inf = \"bart\",                      include_ps_inf = TRUE, ps_method_inf = \"SL.xgboost\",                      or_method_inf = NA, ntrees_rf, ntrees_gbm, min_nodes,                      max_nodes, t, q, rules_method, include_offset,                      offset_name, cate_method = \"linreg\", cate_SL_library = NA)  cre_results_4[[\"CATE_results\"]][,1] cre_results_4[[\"CATE_results\"]][,1]"},{"path":"https://github.com/fasrc/CRE/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kwonsang Lee. Author. Falco Joannes Bargagli Stoffi. Author. Daniela Maria Garcia. Author. Naeem Khoshnevis. Author, maintainer.            FASRC","code":""},{"path":"https://github.com/fasrc/CRE/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lee K, Bargagli Stoffi F, Garcia D, Khoshnevis N (2022). CRE: Interpretable Subgroups Identification Ensemble Learning Causal Rules. R package version 0.0.1.9000, https://github.com/fasrc/CRE.","code":"@Manual{,   title = {CRE: Interpretable Subgroups Identification through Ensemble Learning of Causal Rules},   author = {Kwonsang Lee and Falco Joannes {Bargagli Stoffi} and Daniela Maria Garcia and Naeem Khoshnevis},   year = {2022},   note = {R package version 0.0.1.9000},   url = {https://github.com/fasrc/CRE}, }"},{"path":[]},{"path":"https://github.com/fasrc/CRE/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Interpretable Subgroups Identification through Ensemble Learning of Causal Rules","text":"Causal subgroup identification powerful statistical tool determining vulnerabilities population respect particular treatment. causal machine learning provides efficient accurate tool data-driven subgroup identification, software packages proving essential means easily disseminate reproduce algorithms broadly. CRE Package, written R available GitHub, implements recently developed Causal Rule Ensemble (CRE) algorithm, flexible precise method denovo subgroup discovery. CRE approach focuses identifying drivers treatment heterogeneity observational randomized studies presence intervention treatment.","code":""},{"path":"https://github.com/fasrc/CRE/index.html","id":"package-details","dir":"","previous_headings":"","what":"Package Details","title":"Interpretable Subgroups Identification through Ensemble Learning of Causal Rules","text":"Package centered one R function, cre(), conducts entirety CRE algorithm given dataset series input parameters user. cre() function calls number helper functions conduct discovery inference subsample analysis. example, estimation Individual Treatment Effects, users can select particular method large list methodologies, vary respect speed precision. parameter selections determine helper functions cre() calls. CRE method splits inputted data discovery inference subsamples. discovery subsample, generates filters causal rules explain heterogeneity treatment effects. applies rules inference subsample estimates Conditional Average Treatment Effect (CATE) subgroup. final output cre() list selected causal rules identify subgroups higher heterogeneity effects matrix estimated CATEs rule, highly accessible interpretable. Note: sensitivity analysis unmeasured confounding also implemented later version.","code":""},{"path":"https://github.com/fasrc/CRE/index.html","id":"applications","dir":"","previous_headings":"","what":"Applications","title":"Interpretable Subgroups Identification through Ensemble Learning of Causal Rules","text":"package, user can apply method variety new datasets. applications CRE method R package vast, notable potential impact field public health. intend apply method dataset linking air pollution (PM2.5) data Medicare mortality data across United States. empirical goal identify vulnerable communities, inform policymakers mitigate negative health economic effects subgroups reduce inequality.","code":""},{"path":"https://github.com/fasrc/CRE/reference/analyze_sensitivity.html","id":null,"dir":"Reference","previous_headings":"","what":"Sensitivity Analysis — analyze_sensitivity","title":"Sensitivity Analysis — analyze_sensitivity","text":"Method analyzing sensitivity estimates causal rule-specific treatment effects","code":""},{"path":"https://github.com/fasrc/CRE/reference/analyze_sensitivity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sensitivity Analysis — analyze_sensitivity","text":"","code":"analyze_sensitivity(ite_std, rules_matrix_std)"},{"path":"https://github.com/fasrc/CRE/reference/analyze_sensitivity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sensitivity Analysis — analyze_sensitivity","text":"ite_std standardized ITE rules_matrix_std standardized causal rules matrix","code":""},{"path":"https://github.com/fasrc/CRE/reference/analyze_sensitivity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sensitivity Analysis — analyze_sensitivity","text":"list containing results sensitivity analysis","code":""},{"path":"https://github.com/fasrc/CRE/reference/autoplot.cre.html","id":null,"dir":"Reference","previous_headings":"","what":"A helper function for cre object — autoplot.cre","title":"A helper function for cre object — autoplot.cre","text":"helper function plot cre object using ggplot2 package.","code":""},{"path":"https://github.com/fasrc/CRE/reference/autoplot.cre.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A helper function for cre object — autoplot.cre","text":"","code":"# S3 method for cre autoplot(object, ...)"},{"path":"https://github.com/fasrc/CRE/reference/autoplot.cre.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A helper function for cre object — autoplot.cre","text":"object cre object. ... Additional arguments passed customize plot.","code":""},{"path":"https://github.com/fasrc/CRE/reference/autoplot.cre.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A helper function for cre object — autoplot.cre","text":"Returns ggplot object.","code":""},{"path":"https://github.com/fasrc/CRE/reference/check_input_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Input Data — check_input_data","title":"Check Input Data — check_input_data","text":"Conducts sanity checks input data","code":""},{"path":"https://github.com/fasrc/CRE/reference/check_input_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Input Data — check_input_data","text":"","code":"check_input_data(y, z, X)"},{"path":"https://github.com/fasrc/CRE/reference/check_input_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Input Data — check_input_data","text":"y observed response vector z treatment vector X features matrix","code":""},{"path":"https://github.com/fasrc/CRE/reference/check_input_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Input Data — check_input_data","text":"Number data samples.","code":""},{"path":"https://github.com/fasrc/CRE/reference/cre.html","id":null,"dir":"Reference","previous_headings":"","what":"The Causal Rule Ensemble — cre","title":"The Causal Rule Ensemble — cre","text":"Performs Causal Rule Ensemble dataset response variable, treatment variable, various features","code":""},{"path":"https://github.com/fasrc/CRE/reference/cre.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Causal Rule Ensemble — cre","text":"","code":"cre(   y,   z,   X,   ratio_dis,   ite_method_dis,   include_ps_dis = NA,   ps_method_dis = \"SL.xgboost\",   or_method_dis = NA,   ite_method_inf,   include_ps_inf = NA,   ps_method_inf = \"SL.xgboost\",   or_method_inf = NA,   ntrees_rf,   ntrees_gbm,   min_nodes,   max_nodes,   t,   q,   rules_method = NA,   include_offset = FALSE,   offset_name = NA,   cate_method = \"DRLearner\",   cate_SL_library = \"SL.xgboost\",   filter_cate = FALSE )"},{"path":"https://github.com/fasrc/CRE/reference/cre.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Causal Rule Ensemble — cre","text":"y observed response vector z treatment vector X covariate matrix ratio_dis ratio data delegated discovery sub-sample ite_method_dis method estimate discovery sample ITE include_ps_dis whether include propensity score estimate covariate discovery ITE estimation, considered BART, XBART, CF ps_method_dis estimation model propensity score discovery subsample or_method_dis estimation model outcome regressions estimate_ite_aipw discovery subsample ite_method_inf method estimate inference sample ITE include_ps_inf whether include propensity score estimate covariate inference ITE estimation, considered BART, XBART, CF ps_method_inf estimation model propensity score inference subsample or_method_inf estimation model outcome regressions estimate_ite_aipw inference subsample ntrees_rf number decision trees randomForest ntrees_gbm number decision trees gradient boosting min_nodes minimum size trees' terminal nodes max_nodes maximum size trees' terminal nodes t common support used generating causal rules matrix q selection threshold used selecting causal rules rules_method method selecting causal rules binary outcomes include_offset whether include offset estimating ITE, poisson offset_name name offset, included cate_method method estimate CATE values cate_SL_library library used cate_method set DRLearner filter_cate whether filter rules p-value <= 0.05","code":""},{"path":"https://github.com/fasrc/CRE/reference/cre.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Causal Rule Ensemble — cre","text":"S3 object containing matrix Conditional Average Treatment Effect estimates","code":""},{"path":"https://github.com/fasrc/CRE/reference/cre.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Causal Rule Ensemble — cre","text":"","code":"dataset <- generate_cre_dataset(n = 1000, rho = 0, n_rules = 2, p = 10,                                 effect_size = 2, binary = FALSE)  cre_results <- cre(y = dataset[[\"y\"]], z = dataset[[\"z\"]],                    X = as.data.frame(dataset[[\"X\"]]), ratio_dis = 0.25,                    ite_method_dis = \"bart\", include_ps_dis = TRUE,                    ite_method_inf = \"bart\", include_ps_inf = TRUE,                    ntrees_rf = 100, ntrees_gbm = 50, min_nodes = 20,                    max_nodes = 5, t = 0.025, q = 0.8) #> Loading required package: nnls #> Loading required namespace: xgboost #> fitting treatment model via method 'bart' #> fitting response model via method 'bart' #> Registered S3 method overwritten by 'RRF': #>   method      from         #>   plot.margin randomForest #> 416 rules (length<=15) were extracted from the first 100 trees. #> 200 rules (length<=15) were extracted from the first 50 trees. #> Conducting Inference Subsample Analysis #> fitting treatment model via method 'bart' #> fitting response model via method 'bart'"},{"path":"https://github.com/fasrc/CRE/reference/cre_crossfit.html","id":null,"dir":"Reference","previous_headings":"","what":"The Causal Rule Ensemble Crossfit — cre_crossfit","title":"The Causal Rule Ensemble Crossfit — cre_crossfit","text":"Performs Causal Rule Ensemble twice dataset response variable, treatment variable, various features, swapping discovery inference subsamples.","code":""},{"path":"https://github.com/fasrc/CRE/reference/cre_crossfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Causal Rule Ensemble Crossfit — cre_crossfit","text":"","code":"cre_crossfit(   y,   z,   X,   ite_method_dis,   include_ps_dis = NA,   ps_method_dis = \"SL.xgboost\",   or_method_dis = NA,   ite_method_inf,   include_ps_inf = NA,   ps_method_inf = \"SL.xgboost\",   or_method_inf = NA,   ntrees_rf,   ntrees_gbm,   min_nodes,   max_nodes,   t,   q,   rules_method = NA,   include_offset = FALSE,   offset_name = NA,   cate_method = \"DRLearner\",   cate_SL_library = \"SL.xgboost\",   filter_cate = FALSE )"},{"path":"https://github.com/fasrc/CRE/reference/cre_crossfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Causal Rule Ensemble Crossfit — cre_crossfit","text":"y observed response vector z treatment vector X covariate matrix ite_method_dis method estimate discovery sample ITE include_ps_dis whether include propensity score estimate covariate discovery ITE estimation, considered BART, XBART, CF ps_method_dis estimation model propensity score discovery subsample or_method_dis estimation model outcome regressions estimate_ite_aipw discovery subsample ite_method_inf method estimate inference sample ITE include_ps_inf whether include propensity score estimate covariate inference ITE estimation, considered BART, XBART, CF ps_method_inf estimation model propensity score inference subsample or_method_inf estimation model outcome regressions estimate_ite_aipw inference subsample ntrees_rf number decision trees randomForest ntrees_gbm number decision trees gradient boosting min_nodes minimum size trees' terminal nodes max_nodes maximum size trees' terminal nodes t common support used generating causal rules matrix q selection threshold used selecting causal rules rules_method method selecting causal rules binary outcomes include_offset whether include offset estimating ITE, poisson offset_name name offset, included cate_method method estimate CATE values cate_SL_library library used cate_method set DRLearner filter_cate whether filter rules p-value <= 0.05","code":""},{"path":"https://github.com/fasrc/CRE/reference/cre_crossfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Causal Rule Ensemble Crossfit — cre_crossfit","text":"S3 object containing matrix averaged Conditional Average Treatment Effect estimates two CRE iterations","code":""},{"path":"https://github.com/fasrc/CRE/reference/cre_crossfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Causal Rule Ensemble Crossfit — cre_crossfit","text":"","code":"dataset <- generate_cre_dataset(n = 1000, rho = 0, n_rules = 2, p = 10,                                 effect_size = 2, binary = FALSE)  cre_cross_results <- cre_crossfit(y = dataset[[\"y\"]], z = dataset[[\"z\"]],                                   X = as.data.frame(dataset[[\"X\"]]),                                   ite_method_dis = \"bart\",                                   include_ps_dis = TRUE,                                   ite_method_inf = \"bart\",                                   include_ps_inf = TRUE,                                   ntrees_rf = 100, ntrees_gbm = 50,                                   min_nodes = 20, max_nodes = 5,                                   t = 0.025, q = 0.8) #> fitting treatment model via method 'bart' #> fitting response model via method 'bart' #> fitting treatment model via method 'bart' #> fitting response model via method 'bart' #> Conducting Discovery Subsample Analysis 1 #> 451 rules (length<=15) were extracted from the first 100 trees. #> 200 rules (length<=15) were extracted from the first 50 trees. #> Conducting Inference Subsample Analysis 1 #> Conducting Discovery Subsample Analysis 2 #> 457 rules (length<=15) were extracted from the first 100 trees. #> 100 rules (length<=15) were extracted from the first 50 trees. #> Conducting Inference Subsample Analysis 2"},{"path":"https://github.com/fasrc/CRE/reference/estimate_cate.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the Conditional Average Treatment Effect — estimate_cate","title":"Estimate the Conditional Average Treatment Effect — estimate_cate","text":"Estimates Conditional Average Treatment Effect given standardized vector Individual Treatment Effects, standardized matrix causal rules, list causal rules.","code":""},{"path":"https://github.com/fasrc/CRE/reference/estimate_cate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the Conditional Average Treatment Effect — estimate_cate","text":"","code":"estimate_cate(   y_inf,   z_inf,   X_inf,   X_names,   include_offset,   offset_name,   rules_matrix_inf,   select_rules_interpretable,   cate_method,   ite_inf,   sd_ite_inf,   cate_SL_library,   filter_cate )"},{"path":"https://github.com/fasrc/CRE/reference/estimate_cate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the Conditional Average Treatment Effect — estimate_cate","text":"y_inf outcome vector inference subsample z_inf treatment vector inference subsample X_inf covariate vector inference subsample X_names names covariates include_offset whether include offset estimating ITE, poisson offset_name name offset, included rules_matrix_inf standardized causal rules matrix inference subsample select_rules_interpretable list select causal rules terms coviariate names cate_method method estimate CATE values ite_inf estimated ITEs inference subsample sd_ite_inf standard deviations estimated ITEs inference subsample cate_SL_library library used cate_method = DRLearner filter_cate whether filter rules p-value <= 0.05","code":""},{"path":"https://github.com/fasrc/CRE/reference/estimate_cate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the Conditional Average Treatment Effect — estimate_cate","text":"matrix CATE estimates","code":""},{"path":"https://github.com/fasrc/CRE/reference/estimate_cate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate the Conditional Average Treatment Effect — estimate_cate","text":"","code":"dataset <- generate_cre_dataset(n = 1000, rho = 0, n_rules = 2, p = 10,                                 effect_size = 2, binary = FALSE)  # Initialize parameters y <- dataset[[\"y\"]] z <- dataset[[\"z\"]] X <- as.data.frame(dataset[[\"X\"]]) X_names <- names(as.data.frame(X)) ratio_dis <- 0.25 ite_method_dis <- \"bart\" include_ps_dis <- TRUE ps_method_dis <- \"SL.xgboost\" or_method_dis <- NA ite_method_inf <- \"bart\" include_ps_inf <- TRUE ps_method_inf <- \"SL.xgboost\" or_method_inf <- NA ntrees_rf <- 100 ntrees_gbm <- 50 min_nodes <- 20 max_nodes <- 5 t <- 0.025 q <- 0.8 rules_method <- NA include_offset <- FALSE offset_name <- NA binary <- FALSE cate_method <- \"DRLearner\" cate_SL_library <- \"SL.xgboost\" filter_cate <- FALSE  # Split data X <- as.matrix(X) y <- as.matrix(y) z <- as.matrix(z) subgroups <- split_data(y, z, X, ratio_dis) discovery <- subgroups[[1]] inference <- subgroups[[2]]  # Generate y, z, and X for discovery and inference data y_dis <- discovery[,1] z_dis <- discovery[,2] X_dis <- discovery[,3:ncol(discovery)]  y_inf <- inference[,1] z_inf <- inference[,2] X_inf <- inference[,3:ncol(inference)]  # Estimate ITE on Discovery Subsample ite_list_dis <- estimate_ite(y_dis, z_dis, X_dis, ite_method_dis,                              include_ps_dis, ps_method_dis, or_method_dis,                              binary, X_names, include_offset, offset_name) #> fitting treatment model via method 'bart' #> fitting response model via method 'bart' ite_dis <- ite_list_dis[[\"ite\"]] ite_std_dis <- ite_list_dis[[\"ite_std\"]]  # Generate rules list initial_rules_dis <- generate_rules(X_dis, ite_std_dis, ntrees_rf, ntrees_gbm,                                     min_nodes, max_nodes) #> 429 rules (length<=15) were extracted from the first 100 trees. #> 150 rules (length<=15) were extracted from the first 50 trees.  # Generate rules matrix rules_all_dis <- generate_rules_matrix(X_dis, initial_rules_dis, t) rules_matrix_dis <- rules_all_dis[[\"rules_matrix\"]] rules_matrix_std_dis <- rules_all_dis[[\"rules_matrix_std\"]] rules_list_dis <- rules_all_dis[[\"rules_list\"]]  # Select important rules select_rules_dis <- as.character(select_causal_rules(rules_matrix_std_dis, rules_list_dis,                                                      ite_std_dis, binary, q, rules_method)) select_rules_matrix_dis <- rules_matrix_dis[,which(rules_list_dis %in% select_rules_dis)] select_rules_matrix_std_dis <- rules_matrix_std_dis[,which(rules_list_dis %in% select_rules_dis)] if (length(select_rules_dis) == 0) stop(\"No significant rules were discovered. Ending Analysis.\")  # Estimate Inference ITE and CATE rules_matrix_inf <- matrix(0, nrow = dim(X_inf)[1], ncol = length(select_rules_dis)) for (i in 1:length(select_rules_dis)) {   rules_matrix_inf[eval(parse(text = select_rules_dis[i]), list(X = X_inf)), i] <- 1 } select_rules_interpretable <- interpret_select_rules(select_rules_dis, X_names)  ite_list_inf <- estimate_ite(y_inf, z_inf, X_inf, ite_method_inf,                              include_ps_inf, ps_method_inf, or_method_inf,                              binary, X_names, include_offset, offset_name) #> fitting treatment model via method 'bart' #> fitting response model via method 'bart' ite_inf <- ite_list_inf[[\"ite\"]] ite_std_inf <- ite_list_inf[[\"ite_std\"]]  cate_inf <- estimate_cate(y_inf, z_inf, X_inf, X_names, include_offset, offset_name,                          rules_matrix_inf, select_rules_interpretable,                          cate_method, ite_inf, sd_ite_inf,                          cate_SL_library, filter_cate)"},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the Individual Treatment Effect — estimate_ite","title":"Estimate the Individual Treatment Effect — estimate_ite","text":"Estimates Individual Treatment Effect given response vector, treatment vector, features matrix, desired algorithm.","code":""},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the Individual Treatment Effect — estimate_ite","text":"","code":"estimate_ite(   y,   z,   X,   ite_method,   include_ps,   ps_method,   or_method,   binary,   X_names,   include_offset,   offset_name )"},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the Individual Treatment Effect — estimate_ite","text":"y observed response vector z treatment vector X features matrix ite_method method estimating Individual Treatment Effect: ipw: Inverse Propensity Weighting sipw: Stabilized Inverse Propensity Weighting aipw: Augmented Inverse Propensity Weighting : Outcome Regression, TODO: change non reserved term. bart: BART xbart: Accelerated BART bcf: Bayesian Causal Forest xbcf: Accelerated Bayesian Causal Forest cf: Causal Forest poisson: Poisson Estimation include_ps whether include propensity score estimate covariate ITE estimation ps_method estimation method propensity score or_method estimation model outcome regressions estimate_ite_aipw binary whether outcome binary X_names names covariates include_offset whether include offset estimating ITE, poisson offset_name name offset, included","code":""},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the Individual Treatment Effect — estimate_ite","text":"list includes: raw ITE estimates standardized ITE estimates, standard deviations ITE estimates.","code":""},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate the Individual Treatment Effect — estimate_ite","text":"","code":"dataset <- generate_cre_dataset(n = 1000, rho = 0, n_rules = 2, p = 10,                                 effect_size = 2, binary = FALSE)  # Initialize parameters y <- dataset[[\"y\"]] z <- dataset[[\"z\"]] X <- as.data.frame(dataset[[\"X\"]]) ite_method <- \"bart\" include_ps <- TRUE ps_method <- \"SL.xgboost\" or_method <- NA binary <- FALSE X_names <- names(as.data.frame(X)) include_offset <- FALSE offset_name <- NA  ite_list <- estimate_ite(y, z, X, ite_method, include_ps, ps_method, or_method,                          binary, X_names, include_offset, offset_name) #> fitting treatment model via method 'bart' #> fitting response model via method 'bart'"},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite_aipw.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the Individual Treatment Effect using Augmented Inverse Propensity Weighting — estimate_ite_aipw","title":"Estimate the Individual Treatment Effect using Augmented Inverse Propensity Weighting — estimate_ite_aipw","text":"Estimates Individual Treatment Effect using Augmented Inverse Propensity Weighting given response vector, treatment vector, features matrix, estimation model propensity score estimation model outcome regressions","code":""},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite_aipw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the Individual Treatment Effect using Augmented Inverse Propensity Weighting — estimate_ite_aipw","text":"","code":"estimate_ite_aipw(y, z, X, ps_method = \"SL.xgboost\", or_method = \"SL.xgboost\")"},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite_aipw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the Individual Treatment Effect using Augmented Inverse Propensity Weighting — estimate_ite_aipw","text":"y observed response vector z treatment vector X features matrix ps_method estimation model propensity score or_method estimation model outcome regressions","code":""},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite_aipw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the Individual Treatment Effect using Augmented Inverse Propensity Weighting — estimate_ite_aipw","text":"list ITE estimates standard deviations ITE estimates","code":""},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite_aipw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate the Individual Treatment Effect using Augmented Inverse Propensity Weighting — estimate_ite_aipw","text":"","code":"dataset <- generate_cre_dataset(n = 1000, rho = 0, n_rules = 2, p = 10,                                 effect_size = 2, binary = FALSE)  # Initialize parameters y <- dataset[[\"y\"]] z <- dataset[[\"z\"]] X <- as.data.frame(dataset[[\"X\"]]) ps_method <- \"SL.xgboost\" or_method <- \"SL.xgboost\"  ite_list <- estimate_ite_aipw(y, z, X, ps_method, or_method)"},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite_bart.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the Individual Treatment Effect using Bayesian Additive Regression Trees — estimate_ite_bart","title":"Estimate the Individual Treatment Effect using Bayesian Additive Regression Trees — estimate_ite_bart","text":"Estimates Individual Treatment Effect using Bayesian Additive Regression Trees given response vector, treatment vector, features matrix.","code":""},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite_bart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the Individual Treatment Effect using Bayesian Additive Regression Trees — estimate_ite_bart","text":"","code":"estimate_ite_bart(y, z, X, include_ps, ps_method)"},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite_bart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the Individual Treatment Effect using Bayesian Additive Regression Trees — estimate_ite_bart","text":"y observed response vector z treatment vector X features matrix include_ps whether include propensity score estimate covariate ITE estimation ps_method method estimation propensity score","code":""},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite_bart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the Individual Treatment Effect using Bayesian Additive Regression Trees — estimate_ite_bart","text":"list ITE estimates standard deviations ITE estimates","code":""},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite_bart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate the Individual Treatment Effect using Bayesian Additive Regression Trees — estimate_ite_bart","text":"","code":"dataset <- generate_cre_dataset(n = 1000, rho = 0, n_rules = 2, p = 10,                                 effect_size = 2, binary = FALSE)  # Initialize parameters y <- dataset[[\"y\"]] z <- dataset[[\"z\"]] X <- as.data.frame(dataset[[\"X\"]]) include_ps <- TRUE ps_method <- \"SL.xgboost\"  ite_list <- estimate_ite_bart(y, z, X, include_ps, ps_method) #> fitting treatment model via method 'bart' #> fitting response model via method 'bart'"},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite_bcf.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the Individual Treatment Effect using Bayesian Causal Forest — estimate_ite_bcf","title":"Estimate the Individual Treatment Effect using Bayesian Causal Forest — estimate_ite_bcf","text":"Estimates Individual Treatment Effect using Bayesian Causal Forest given response vector, treatment vector, features matrix.","code":""},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite_bcf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the Individual Treatment Effect using Bayesian Causal Forest — estimate_ite_bcf","text":"","code":"estimate_ite_bcf(y, z, X, ps_method)"},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite_bcf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the Individual Treatment Effect using Bayesian Causal Forest — estimate_ite_bcf","text":"y observed response vector z treatment vector X features matrix ps_method method estimation propensity score","code":""},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite_bcf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the Individual Treatment Effect using Bayesian Causal Forest — estimate_ite_bcf","text":"list ITE estimates standard deviations ITE estimates","code":""},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite_bcf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate the Individual Treatment Effect using Bayesian Causal Forest — estimate_ite_bcf","text":"","code":"dataset <- generate_cre_dataset(n = 1000, rho = 0, n_rules = 2, p = 10,                                 effect_size = 2, binary = FALSE)  # Initialize parameters y <- dataset[[\"y\"]] z <- dataset[[\"z\"]] X <- as.data.frame(dataset[[\"X\"]]) ps_method <- \"SL.xgboost\"  ite_list <- estimate_ite_bcf(y, z, as.matrix(X), ps_method) #> Warning: collapsing to unique 'x' values #> Using 11 control variables. #> Using 10 potential effect moderators. #>  #> Beginning MCMC: #> iteration: 0 sigma: 1 #> iteration: 100 sigma: 0.759489 #> iteration: 200 sigma: 0.761875 #> iteration: 300 sigma: 0.730344 #> iteration: 400 sigma: 0.747261 #> iteration: 500 sigma: 0.738655 #> iteration: 600 sigma: 0.798069 #> iteration: 700 sigma: 0.735058 #> iteration: 800 sigma: 0.753716 #> iteration: 900 sigma: 0.745914 #> time for loop: 10"},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite_cf.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the Individual Treatment Effect using Causal Forest — estimate_ite_cf","title":"Estimate the Individual Treatment Effect using Causal Forest — estimate_ite_cf","text":"Estimates Individual Treatment Effect using Causal Forest given response vector, treatment vector, features matrix","code":""},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite_cf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the Individual Treatment Effect using Causal Forest — estimate_ite_cf","text":"","code":"estimate_ite_cf(y, z, X, include_ps, ps_method)"},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite_cf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the Individual Treatment Effect using Causal Forest — estimate_ite_cf","text":"y observed response vector z treatment vector X features matrix include_ps whether include propensity score estimate covariate ITE estimation ps_method method estimation propensity score","code":""},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite_cf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the Individual Treatment Effect using Causal Forest — estimate_ite_cf","text":"list ITE estimates standard deviations ITE estimates","code":""},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite_cf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate the Individual Treatment Effect using Causal Forest — estimate_ite_cf","text":"","code":"dataset <- generate_cre_dataset(n = 1000, rho = 0, n_rules = 2, p = 10,                                 effect_size = 2, binary = FALSE)  # Initialize parameters y <- dataset[[\"y\"]] z <- dataset[[\"z\"]] X <- as.data.frame(dataset[[\"X\"]]) include_ps <- TRUE ps_method <- \"SL.xgboost\"  ite_list <- estimate_ite_cf(y, z, X, include_ps, ps_method)"},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite_ipw.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the Individual Treatment Effect using Inverse Propensity Weighting — estimate_ite_ipw","title":"Estimate the Individual Treatment Effect using Inverse Propensity Weighting — estimate_ite_ipw","text":"Estimates Individual Treatment Effect using Inverse Propensity Weighting given response vector, treatment vector, features matrix.","code":""},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite_ipw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the Individual Treatment Effect using Inverse Propensity Weighting — estimate_ite_ipw","text":"","code":"estimate_ite_ipw(y, z, X, ps_method)"},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite_ipw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the Individual Treatment Effect using Inverse Propensity Weighting — estimate_ite_ipw","text":"y observed response vector z treatment vector X features matrix ps_method estimation method propensity score","code":""},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite_ipw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the Individual Treatment Effect using Inverse Propensity Weighting — estimate_ite_ipw","text":"vector ITE estimates","code":""},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite_ipw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate the Individual Treatment Effect using Inverse Propensity Weighting — estimate_ite_ipw","text":"","code":"dataset <- generate_cre_dataset(n = 1000, rho = 0, n_rules = 2, p = 10,                                 effect_size = 2, binary = FALSE)  # Initialize parameters y <- dataset[[\"y\"]] z <- dataset[[\"z\"]] X <- as.data.frame(dataset[[\"X\"]]) ps_method <- \"SL.xgboost\"  ite_list <- estimate_ite_ipw(y, z, X, ps_method)"},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite_or.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the Individual Treatment Effect using Outcome Regression — estimate_ite_or","title":"Estimate the Individual Treatment Effect using Outcome Regression — estimate_ite_or","text":"Method estimating Individual Treatment Effect using Outcome Regression given response vector, treatment vector, features matrix","code":""},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite_or.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the Individual Treatment Effect using Outcome Regression — estimate_ite_or","text":"","code":"estimate_ite_or(y, z, X)"},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite_or.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the Individual Treatment Effect using Outcome Regression — estimate_ite_or","text":"y observed response vector z treatment vector X features matrix","code":""},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite_or.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the Individual Treatment Effect using Outcome Regression — estimate_ite_or","text":"vector ITE estimates","code":""},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite_or.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate the Individual Treatment Effect using Outcome Regression — estimate_ite_or","text":"","code":"dataset <- generate_cre_dataset(n = 1000, rho = 0, n_rules = 2, p = 10,                                 effect_size = 2, binary = FALSE)  # Initialize parameters y <- dataset[[\"y\"]] z <- dataset[[\"z\"]] X <- as.data.frame(dataset[[\"X\"]])  ite_list <- estimate_ite_or(y, z, X) #> *****Into main of wbart #> *****Data: #> data:n,p,np: 370, 10, 630 #> y1,yn: -0.566372, 0.057417 #> x1,x[n*p]: 1.000000, 1.000000 #> xp1,xp[np*p]: 0.000000, 1.000000 #> *****Number of Trees: 200 #> *****Number of Cut Points: 1 ... 1 #> *****burn and ndpost: 100, 1000 #> *****Prior:beta,alpha,tau,nu,lambda: 2.000000,0.950000,0.126995,3.000000,0.245380 #> *****sigma: 1.122366 #> *****w (weights): 1.000000 ... 1.000000 #> *****Dirichlet:sparse,theta,omega,a,b,rho,augment: 0,0,1,0.5,1,10,0 #> *****nkeeptrain,nkeeptest,nkeeptestme,nkeeptreedraws: 1000,1000,1000,1000 #> *****printevery: 100 #> *****skiptr,skipte,skipteme,skiptreedraws: 1,1,1,1 #>  #> MCMC #> done 0 (out of 1100) #> done 100 (out of 1100) #> done 200 (out of 1100) #> done 300 (out of 1100) #> done 400 (out of 1100) #> done 500 (out of 1100) #> done 600 (out of 1100) #> done 700 (out of 1100) #> done 800 (out of 1100) #> done 900 (out of 1100) #> done 1000 (out of 1100) #> time: 5s #> check counts #> trcnt,tecnt,temecnt,treedrawscnt: 1000,1000,1000,1000 #> *****Into main of wbart #> *****Data: #> data:n,p,np: 630, 10, 370 #> y1,yn: -1.285510, 2.089349 #> x1,x[n*p]: 0.000000, 1.000000 #> xp1,xp[np*p]: 1.000000, 1.000000 #> *****Number of Trees: 200 #> *****Number of Cut Points: 1 ... 1 #> *****burn and ndpost: 100, 1000 #> *****Prior:beta,alpha,tau,nu,lambda: 2.000000,0.950000,0.150460,3.000000,0.195661 #> *****sigma: 1.002228 #> *****w (weights): 1.000000 ... 1.000000 #> *****Dirichlet:sparse,theta,omega,a,b,rho,augment: 0,0,1,0.5,1,10,0 #> *****nkeeptrain,nkeeptest,nkeeptestme,nkeeptreedraws: 1000,1000,1000,1000 #> *****printevery: 100 #> *****skiptr,skipte,skipteme,skiptreedraws: 1,1,1,1 #>  #> MCMC #> done 0 (out of 1100) #> done 100 (out of 1100) #> done 200 (out of 1100) #> done 300 (out of 1100) #> done 400 (out of 1100) #> done 500 (out of 1100) #> done 600 (out of 1100) #> done 700 (out of 1100) #> done 800 (out of 1100) #> done 900 (out of 1100) #> done 1000 (out of 1100) #> time: 7s #> check counts #> trcnt,tecnt,temecnt,treedrawscnt: 1000,1000,1000,1000"},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite_poisson.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the Individual Treatment Effect using Poisson Regression — estimate_ite_poisson","title":"Estimate the Individual Treatment Effect using Poisson Regression — estimate_ite_poisson","text":"Estimates Individual Treatment Effect using Poisson Regression given response vector, treatment vector, features matrix.","code":""},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite_poisson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the Individual Treatment Effect using Poisson Regression — estimate_ite_poisson","text":"","code":"estimate_ite_poisson(y, z, X, X_names, include_offset, offset_name)"},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite_poisson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the Individual Treatment Effect using Poisson Regression — estimate_ite_poisson","text":"y observed response vector z treatment vector X features matrix X_names names covariates include_offset whether include offset estimating ITE, poisson offset_name name offset, included","code":""},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite_poisson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the Individual Treatment Effect using Poisson Regression — estimate_ite_poisson","text":"vector ITE estimates","code":""},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite_poisson.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate the Individual Treatment Effect using Poisson Regression — estimate_ite_poisson","text":"","code":"dataset <- generate_cre_dataset(n = 1000, rho = 0, n_rules = 2, p = 10,                                 effect_size = 2, binary = FALSE)  # Initialize parameters y <- abs(dataset[[\"y\"]]) z <- dataset[[\"z\"]] X <- as.data.frame(dataset[[\"X\"]]) X_names <- names(as.data.frame(X)) include_offset <- FALSE offset_name <- NA  ite_list <- estimate_ite_poisson(y, z, X, X_names, include_offset, offset_name) #> Warning: non-integer x = 2.963416 #> Warning: non-integer x = 3.262616 #> Warning: non-integer x = 0.619355 #> Warning: non-integer x = 0.023706 #> Warning: non-integer x = 2.807754 #> Warning: non-integer x = 1.064135 #> Warning: non-integer x = 1.079569 #> Warning: non-integer x = 0.600038 #> Warning: non-integer x = 1.990271 #> Warning: non-integer x = 1.530926 #> Warning: non-integer x = 3.855605 #> Warning: non-integer x = 0.990837 #> Warning: non-integer x = 0.971855 #> Warning: non-integer x = 0.607105 #> Warning: non-integer x = 0.842852 #> Warning: non-integer x = 1.829751 #> Warning: non-integer x = 2.945851 #> Warning: non-integer x = 3.037270 #> Warning: non-integer x = 0.900273 #> Warning: non-integer x = 4.261793 #> Warning: non-integer x = 2.465365 #> Warning: non-integer x = 1.028311 #> Warning: non-integer x = 0.676878 #> Warning: non-integer x = 3.578988 #> Warning: non-integer x = 2.038527 #> Warning: non-integer x = 1.321585 #> Warning: non-integer x = 5.007156 #> Warning: non-integer x = 1.072940 #> Warning: non-integer x = 1.235337 #> Warning: non-integer x = 1.496016 #> Warning: non-integer x = 2.671240 #> Warning: non-integer x = 0.365859 #> Warning: non-integer x = 1.351049 #> Warning: non-integer x = 1.883915 #> Warning: non-integer x = 0.204347 #> Warning: non-integer x = 0.616811 #> Warning: non-integer x = 0.311266 #> Warning: non-integer x = 0.980801 #> Warning: non-integer x = 0.249917 #> Warning: non-integer x = 2.379650 #> Warning: non-integer x = 2.792830 #> Warning: non-integer x = 2.592191 #> Warning: non-integer x = 1.503886 #> Warning: non-integer x = 0.734312 #> Warning: non-integer x = 0.868660 #> Warning: non-integer x = 2.891208 #> Warning: non-integer x = 1.426717 #> Warning: non-integer x = 1.659302 #> Warning: non-integer x = 1.638152 #> Warning: non-integer x = 1.301482 #> Warning: non-integer x = 1.378352 #> Warning: non-integer x = 2.181030 #> Warning: non-integer x = 0.528900 #> Warning: non-integer x = 0.201289 #> Warning: non-integer x = 4.760651 #> Warning: non-integer x = 0.108659 #> Warning: non-integer x = 1.628947 #> Warning: non-integer x = 0.469962 #> Warning: non-integer x = 0.548030 #> Warning: non-integer x = 1.246407 #> Warning: non-integer x = 0.953947 #> Warning: non-integer x = 1.393077 #> Warning: non-integer x = 1.589260 #> Warning: non-integer x = 0.852867 #> Warning: non-integer x = 1.673240 #> Warning: non-integer x = 2.642432 #> Warning: non-integer x = 2.224322 #> Warning: non-integer x = 1.291044 #> Warning: non-integer x = 2.020677 #> Warning: non-integer x = 0.795732 #> Warning: non-integer x = 0.974803 #> Warning: non-integer x = 3.174193 #> Warning: non-integer x = 1.469426 #> Warning: non-integer x = 2.240905 #> Warning: non-integer x = 1.782187 #> Warning: non-integer x = 1.654870 #> Warning: non-integer x = 1.717452 #> Warning: non-integer x = 0.331997 #> Warning: non-integer x = 0.110046 #> Warning: non-integer x = 5.314144 #> Warning: non-integer x = 2.770454 #> Warning: non-integer x = 3.161053 #> Warning: non-integer x = 1.792867 #> Warning: non-integer x = 1.126057 #> Warning: non-integer x = 4.033747 #> Warning: non-integer x = 3.160210 #> Warning: non-integer x = 0.769250 #> Warning: non-integer x = 0.219889 #> Warning: non-integer x = 2.700808 #> Warning: non-integer x = 3.224498 #> Warning: non-integer x = 3.275601 #> Warning: non-integer x = 0.148404 #> Warning: non-integer x = 1.337238 #> Warning: non-integer x = 0.486678 #> Warning: non-integer x = 1.326806 #> Warning: non-integer x = 3.055630 #> Warning: non-integer x = 3.004833 #> Warning: non-integer x = 0.785443 #> Warning: non-integer x = 1.535055 #> Warning: non-integer x = 3.824825 #> Warning: non-integer x = 0.398985 #> Warning: non-integer x = 1.119424 #> Warning: non-integer x = 2.854999 #> Warning: non-integer x = 3.379844 #> Warning: non-integer x = 2.837002 #> Warning: non-integer x = 0.465808 #> Warning: non-integer x = 1.899937 #> Warning: non-integer x = 2.143123 #> Warning: non-integer x = 0.534352 #> Warning: non-integer x = 2.861542 #> Warning: non-integer x = 1.191643 #> Warning: non-integer x = 0.287352 #> Warning: non-integer x = 2.057722 #> Warning: non-integer x = 2.198176 #> Warning: non-integer x = 1.701234 #> Warning: non-integer x = 0.840997 #> Warning: non-integer x = 1.945719 #> Warning: non-integer x = 0.642622 #> Warning: non-integer x = 0.964305 #> Warning: non-integer x = 2.760725 #> Warning: non-integer x = 0.199507 #> Warning: non-integer x = 3.745313 #> Warning: non-integer x = 4.018896 #> Warning: non-integer x = 1.082672 #> Warning: non-integer x = 0.181196 #> Warning: non-integer x = 1.432456 #> Warning: non-integer x = 0.753953 #> Warning: non-integer x = 0.710958 #> Warning: non-integer x = 2.554216 #> Warning: non-integer x = 1.929814 #> Warning: non-integer x = 2.043009 #> Warning: non-integer x = 2.290318 #> Warning: non-integer x = 1.619085 #> Warning: non-integer x = 0.118493 #> Warning: non-integer x = 0.489193 #> Warning: non-integer x = 1.368370 #> Warning: non-integer x = 0.626685 #> Warning: non-integer x = 3.687855 #> Warning: non-integer x = 2.607177 #> Warning: non-integer x = 0.926232 #> Warning: non-integer x = 3.306393 #> Warning: non-integer x = 3.048952 #> Warning: non-integer x = 0.950510 #> Warning: non-integer x = 0.996823 #> Warning: non-integer x = 0.551179 #> Warning: non-integer x = 5.473938 #> Warning: non-integer x = 2.568496 #> Warning: non-integer x = 0.936298 #> Warning: non-integer x = 0.952311 #> Warning: non-integer x = 4.255587 #> Warning: non-integer x = 0.957154 #> Warning: non-integer x = 2.683964 #> Warning: non-integer x = 2.386624 #> Warning: non-integer x = 3.301624 #> Warning: non-integer x = 0.034874 #> Warning: non-integer x = 0.016624 #> Warning: non-integer x = 0.109269 #> Warning: non-integer x = 1.820144 #> Warning: non-integer x = 2.348011 #> Warning: non-integer x = 0.823551 #> Warning: non-integer x = 0.916483 #> Warning: non-integer x = 3.884752 #> Warning: non-integer x = 2.948549 #> Warning: non-integer x = 1.350663 #> Warning: non-integer x = 1.928434 #> Warning: non-integer x = 1.386911 #> Warning: non-integer x = 1.658633 #> Warning: non-integer x = 0.784633 #> Warning: non-integer x = 0.139149 #> Warning: non-integer x = 5.015606 #> Warning: non-integer x = 3.397691 #> Warning: non-integer x = 0.887505 #> Warning: non-integer x = 0.715899 #> Warning: non-integer x = 0.895787 #> Warning: non-integer x = 0.959160 #> Warning: non-integer x = 0.694762 #> Warning: non-integer x = 1.523896 #> Warning: non-integer x = 1.717515 #> Warning: non-integer x = 4.683024 #> Warning: non-integer x = 0.166421 #> Warning: non-integer x = 1.378501 #> Warning: non-integer x = 0.050670 #> Warning: non-integer x = 1.120978 #> Warning: non-integer x = 3.920757 #> Warning: non-integer x = 4.163745 #> Warning: non-integer x = 2.082256 #> Warning: non-integer x = 0.357292 #> Warning: non-integer x = 3.117639 #> Warning: non-integer x = 0.139841 #> Warning: non-integer x = 1.541880 #> Warning: non-integer x = 0.381269 #> Warning: non-integer x = 0.841467 #> Warning: non-integer x = 0.341782 #> Warning: non-integer x = 2.670921 #> Warning: non-integer x = 0.634113 #> Warning: non-integer x = 1.458710 #> Warning: non-integer x = 2.424559 #> Warning: non-integer x = 1.090539 #> Warning: non-integer x = 2.054378 #> Warning: non-integer x = 0.140366 #> Warning: non-integer x = 1.296643 #> Warning: non-integer x = 0.407075 #> Warning: non-integer x = 0.843405 #> Warning: non-integer x = 2.067281 #> Warning: non-integer x = 1.954213 #> Warning: non-integer x = 0.207869 #> Warning: non-integer x = 3.114283 #> Warning: non-integer x = 0.717386 #> Warning: non-integer x = 0.570328 #> Warning: non-integer x = 0.588210 #> Warning: non-integer x = 2.897491 #> Warning: non-integer x = 1.008892 #> Warning: non-integer x = 0.986458 #> Warning: non-integer x = 1.088020 #> Warning: non-integer x = 4.512704 #> Warning: non-integer x = 1.413765 #> Warning: non-integer x = 0.148029 #> Warning: non-integer x = 2.973049 #> Warning: non-integer x = 1.425745 #> Warning: non-integer x = 0.250944 #> Warning: non-integer x = 2.446726 #> Warning: non-integer x = 2.733314 #> Warning: non-integer x = 0.593312 #> Warning: non-integer x = 0.896183 #> Warning: non-integer x = 2.606116 #> Warning: non-integer x = 0.833752 #> Warning: non-integer x = 1.201580 #> Warning: non-integer x = 0.946593 #> Warning: non-integer x = 2.030531 #> Warning: non-integer x = 0.669567 #> Warning: non-integer x = 3.532083 #> Warning: non-integer x = 2.997164 #> Warning: non-integer x = 4.131534 #> Warning: non-integer x = 2.606899 #> Warning: non-integer x = 2.110668 #> Warning: non-integer x = 1.211108 #> Warning: non-integer x = 0.678904 #> Warning: non-integer x = 1.498763 #> Warning: non-integer x = 1.327809 #> Warning: non-integer x = 1.523224 #> Warning: non-integer x = 2.650112 #> Warning: non-integer x = 0.545843 #> Warning: non-integer x = 2.424127 #> Warning: non-integer x = 0.851275 #> Warning: non-integer x = 0.536773 #> Warning: non-integer x = 1.653827 #> Warning: non-integer x = 3.298134 #> Warning: non-integer x = 1.583785 #> Warning: non-integer x = 2.462967 #> Warning: non-integer x = 0.706164 #> Warning: non-integer x = 0.185598 #> Warning: non-integer x = 0.687115 #> Warning: non-integer x = 1.981780 #> Warning: non-integer x = 0.257074 #> Warning: non-integer x = 0.891842 #> Warning: non-integer x = 2.673237 #> Warning: non-integer x = 0.837765 #> Warning: non-integer x = 0.416394 #> Warning: non-integer x = 2.673409 #> Warning: non-integer x = 2.413339 #> Warning: non-integer x = 0.353086 #> Warning: non-integer x = 0.437583 #> Warning: non-integer x = 0.928916 #> Warning: non-integer x = 1.353512 #> Warning: non-integer x = 1.276729 #> Warning: non-integer x = 1.418561 #> Warning: non-integer x = 0.009530 #> Warning: non-integer x = 2.257284 #> Warning: non-integer x = 0.879883 #> Warning: non-integer x = 1.283955 #> Warning: non-integer x = 1.228178 #> Warning: non-integer x = 3.701750 #> Warning: non-integer x = 3.584367 #> Warning: non-integer x = 3.294421 #> Warning: non-integer x = 1.296739 #> Warning: non-integer x = 1.600065 #> Warning: non-integer x = 4.464299 #> Warning: non-integer x = 0.535350 #> Warning: non-integer x = 0.458016 #> Warning: non-integer x = 0.251049 #> Warning: non-integer x = 0.504585 #> Warning: non-integer x = 1.238697 #> Warning: non-integer x = 1.046845 #> Warning: non-integer x = 6.147341 #> Warning: non-integer x = 1.991287 #> Warning: non-integer x = 0.964633 #> Warning: non-integer x = 0.873475 #> Warning: non-integer x = 2.897497 #> Warning: non-integer x = 5.567493 #> Warning: non-integer x = 0.019006 #> Warning: non-integer x = 2.090801 #> Warning: non-integer x = 1.914985 #> Warning: non-integer x = 1.291861 #> Warning: non-integer x = 1.121833 #> Warning: non-integer x = 2.647272 #> Warning: non-integer x = 1.638881 #> Warning: non-integer x = 0.150357 #> Warning: non-integer x = 1.386301 #> Warning: non-integer x = 1.381724 #> Warning: non-integer x = 1.377907 #> Warning: non-integer x = 2.718618 #> Warning: non-integer x = 0.813842 #> Warning: non-integer x = 0.159963 #> Warning: non-integer x = 1.827758 #> Warning: non-integer x = 1.642740 #> Warning: non-integer x = 0.131093 #> Warning: non-integer x = 0.267183 #> Warning: non-integer x = 1.399642 #> Warning: non-integer x = 2.690048 #> Warning: non-integer x = 1.135774 #> Warning: non-integer x = 0.281134 #> Warning: non-integer x = 1.144544 #> Warning: non-integer x = 1.387381 #> Warning: non-integer x = 0.169350 #> Warning: non-integer x = 2.333010 #> Warning: non-integer x = 0.582262 #> Warning: non-integer x = 1.560848 #> Warning: non-integer x = 0.950898 #> Warning: non-integer x = 2.121924 #> Warning: non-integer x = 1.564429 #> Warning: non-integer x = 1.816721 #> Warning: non-integer x = 1.577224 #> Warning: non-integer x = 2.762547 #> Warning: non-integer x = 1.187980 #> Warning: non-integer x = 3.018170 #> Warning: non-integer x = 2.914077 #> Warning: non-integer x = 0.578744 #> Warning: non-integer x = 3.619969 #> Warning: non-integer x = 0.734002 #> Warning: non-integer x = 0.934871 #> Warning: non-integer x = 3.640643 #> Warning: non-integer x = 0.034594 #> Warning: non-integer x = 2.059261 #> Warning: non-integer x = 1.821830 #> Warning: non-integer x = 1.409598 #> Warning: non-integer x = 0.906394 #> Warning: non-integer x = 2.144452 #> Warning: non-integer x = 2.796092 #> Warning: non-integer x = 0.854614 #> Warning: non-integer x = 2.968179 #> Warning: non-integer x = 2.765013 #> Warning: non-integer x = 2.889111 #> Warning: non-integer x = 0.440896 #> Warning: non-integer x = 1.130893 #> Warning: non-integer x = 0.092991 #> Warning: non-integer x = 1.576159 #> Warning: non-integer x = 1.811811 #> Warning: non-integer x = 0.094885 #> Warning: non-integer x = 3.772713 #> Warning: non-integer x = 0.397899 #> Warning: non-integer x = 1.080670 #> Warning: non-integer x = 1.840037 #> Warning: non-integer x = 0.898840 #> Warning: non-integer x = 2.675477 #> Warning: non-integer x = 1.062211 #> Warning: non-integer x = 1.746443 #> Warning: non-integer x = 2.070446 #> Warning: non-integer x = 1.388297 #> Warning: non-integer x = 0.019360 #> Warning: non-integer x = 1.127899 #> Warning: non-integer x = 1.924229 #> Warning: non-integer x = 3.181211 #> Warning: non-integer x = 0.442875 #> Warning: non-integer x = 1.610030 #> Warning: non-integer x = 0.265896 #> Warning: non-integer x = 1.204928 #> Warning: non-integer x = 1.263469 #> Warning: non-integer x = 0.977857 #> Warning: non-integer x = 2.221705 #> Warning: non-integer x = 0.573440 #> Warning: non-integer x = 2.401518 #> Warning: non-integer x = 1.092168 #> Warning: non-integer x = 0.211828 #> Warning: non-integer x = 1.631176 #> Warning: non-integer x = 1.410943 #> Warning: non-integer x = 2.921441 #> Warning: non-integer x = 0.783405 #> Warning: non-integer x = 4.766854 #> Warning: non-integer x = 1.103725 #> Warning: non-integer x = 0.014392 #> Warning: non-integer x = 0.205555 #> Warning: non-integer x = 0.717228 #> Warning: non-integer x = 1.276288 #> Warning: non-integer x = 3.021159 #> Warning: non-integer x = 0.643953 #> Warning: non-integer x = 1.055770 #> Warning: non-integer x = 0.119001 #> Warning: non-integer x = 1.109685 #> Warning: non-integer x = 0.240183 #> Warning: non-integer x = 3.971792 #> Warning: non-integer x = 0.893938 #> Warning: non-integer x = 3.200440 #> Warning: non-integer x = 0.065302 #> Warning: non-integer x = 0.139391 #> Warning: non-integer x = 2.605745 #> Warning: non-integer x = 3.871709 #> Warning: non-integer x = 3.294807 #> Warning: non-integer x = 1.918093 #> Warning: non-integer x = 0.093648 #> Warning: non-integer x = 1.081778 #> Warning: non-integer x = 0.157614 #> Warning: non-integer x = 1.738085 #> Warning: non-integer x = 0.315785 #> Warning: non-integer x = 0.303150 #> Warning: non-integer x = 1.374614 #> Warning: non-integer x = 1.965177 #> Warning: non-integer x = 1.777077 #> Warning: non-integer x = 2.421170 #> Warning: non-integer x = 1.109009 #> Warning: non-integer x = 1.387434 #> Warning: non-integer x = 2.947914 #> Warning: non-integer x = 2.542236 #> Warning: non-integer x = 0.852474 #> Warning: non-integer x = 2.163917 #> Warning: non-integer x = 2.835623 #> Warning: non-integer x = 1.123121 #> Warning: non-integer x = 3.279993 #> Warning: non-integer x = 3.227249 #> Warning: non-integer x = 0.856669 #> Warning: non-integer x = 0.089720 #> Warning: non-integer x = 0.353752 #> Warning: non-integer x = 1.231874 #> Warning: non-integer x = 1.801440 #> Warning: non-integer x = 3.701535 #> Warning: non-integer x = 3.424982 #> Warning: non-integer x = 1.512317 #> Warning: non-integer x = 1.207532 #> Warning: non-integer x = 1.205687 #> Warning: non-integer x = 1.361830 #> Warning: non-integer x = 1.698425 #> Warning: non-integer x = 1.094340 #> Warning: non-integer x = 0.502821 #> Warning: non-integer x = 3.113678 #> Warning: non-integer x = 1.846693 #> Warning: non-integer x = 0.904733 #> Warning: non-integer x = 2.281444 #> Warning: non-integer x = 0.581085 #> Warning: non-integer x = 0.462103 #> Warning: non-integer x = 2.134824 #> Warning: non-integer x = 1.864070 #> Warning: non-integer x = 1.207117 #> Warning: non-integer x = 1.734183 #> Warning: non-integer x = 0.408012 #> Warning: non-integer x = 2.647893 #> Warning: non-integer x = 1.822174 #> Warning: non-integer x = 1.798635 #> Warning: non-integer x = 1.910181 #> Warning: non-integer x = 1.056510 #> Warning: non-integer x = 0.474087 #> Warning: non-integer x = 2.400194 #> Warning: non-integer x = 1.223395 #> Warning: non-integer x = 0.981251 #> Warning: non-integer x = 3.551126 #> Warning: non-integer x = 0.432612 #> Warning: non-integer x = 0.755945 #> Warning: non-integer x = 0.388182 #> Warning: non-integer x = 0.167449 #> Warning: non-integer x = 2.496428 #> Warning: non-integer x = 0.368791 #> Warning: non-integer x = 0.629021 #> Warning: non-integer x = 0.337452 #> Warning: non-integer x = 0.416148 #> Warning: non-integer x = 1.311771 #> Warning: non-integer x = 2.470900 #> Warning: non-integer x = 0.223755 #> Warning: non-integer x = 1.086468 #> Warning: non-integer x = 0.911118 #> Warning: non-integer x = 0.037397 #> Warning: non-integer x = 2.587214 #> Warning: non-integer x = 1.461958 #> Warning: non-integer x = 1.499300 #> Warning: non-integer x = 0.633815 #> Warning: non-integer x = 1.624960 #> Warning: non-integer x = 1.379396 #> Warning: non-integer x = 2.044004 #> Warning: non-integer x = 0.533754 #> Warning: non-integer x = 2.540665 #> Warning: non-integer x = 0.108310 #> Warning: non-integer x = 1.416773 #> Warning: non-integer x = 1.598868 #> Warning: non-integer x = 2.198335 #> Warning: non-integer x = 0.701628 #> Warning: non-integer x = 0.331313 #> Warning: non-integer x = 0.075656 #> Warning: non-integer x = 0.974077 #> Warning: non-integer x = 2.087445 #> Warning: non-integer x = 3.483981 #> Warning: non-integer x = 0.500344 #> Warning: non-integer x = 2.937225 #> Warning: non-integer x = 2.318398 #> Warning: non-integer x = 1.635642 #> Warning: non-integer x = 0.545843 #> Warning: non-integer x = 0.574032 #> Warning: non-integer x = 0.081946 #> Warning: non-integer x = 0.956191 #> Warning: non-integer x = 2.970048 #> Warning: non-integer x = 0.443264 #> Warning: non-integer x = 0.948899 #> Warning: non-integer x = 0.068049 #> Warning: non-integer x = 0.149359 #> Warning: non-integer x = 0.544818 #> Warning: non-integer x = 1.231266 #> Warning: non-integer x = 0.107133 #> Warning: non-integer x = 0.621563 #> Warning: non-integer x = 0.139412 #> Warning: non-integer x = 1.782896 #> Warning: non-integer x = 1.563920 #> Warning: non-integer x = 0.211790 #> Warning: non-integer x = 1.399806 #> Warning: non-integer x = 2.966675 #> Warning: non-integer x = 1.277840 #> Warning: non-integer x = 2.961140 #> Warning: non-integer x = 1.078179 #> Warning: non-integer x = 0.511016 #> Warning: non-integer x = 1.452897 #> Warning: non-integer x = 1.440812 #> Warning: non-integer x = 0.654314 #> Warning: non-integer x = 0.504476 #> Warning: non-integer x = 0.142262 #> Warning: non-integer x = 1.635669 #> Warning: non-integer x = 1.032399 #> Warning: non-integer x = 3.316770 #> Warning: non-integer x = 0.396700 #> Warning: non-integer x = 2.403458 #> Warning: non-integer x = 0.039024 #> Warning: non-integer x = 0.385995 #> Warning: non-integer x = 2.120606 #> Warning: non-integer x = 0.527936 #> Warning: non-integer x = 1.637980 #> Warning: non-integer x = 1.420485 #> Warning: non-integer x = 1.127996 #> Warning: non-integer x = 1.111582 #> Warning: non-integer x = 1.124644 #> Warning: non-integer x = 1.153443 #> Warning: non-integer x = 0.629283 #> Warning: non-integer x = 1.832217 #> Warning: non-integer x = 0.128094 #> Warning: non-integer x = 0.380698 #> Warning: non-integer x = 1.570876 #> Warning: non-integer x = 0.654145 #> Warning: non-integer x = 2.204442 #> Warning: non-integer x = 3.306180 #> Warning: non-integer x = 0.015399 #> Warning: non-integer x = 0.316443 #> Warning: non-integer x = 2.946888 #> Warning: non-integer x = 0.851723 #> Warning: non-integer x = 0.709603 #> Warning: non-integer x = 1.130735 #> Warning: non-integer x = 0.230667 #> Warning: non-integer x = 0.249097 #> Warning: non-integer x = 0.211061 #> Warning: non-integer x = 1.546213 #> Warning: non-integer x = 1.512755 #> Warning: non-integer x = 0.674868 #> Warning: non-integer x = 0.942275 #> Warning: non-integer x = 0.943887 #> Warning: non-integer x = 0.693307 #> Warning: non-integer x = 2.751844 #> Warning: non-integer x = 0.106430 #> Warning: non-integer x = 0.888194 #> Warning: non-integer x = 1.661921 #> Warning: non-integer x = 0.580574 #> Warning: non-integer x = 0.500812 #> Warning: non-integer x = 2.442689 #> Warning: non-integer x = 0.571641 #> Warning: non-integer x = 0.963751 #> Warning: non-integer x = 0.173589 #> Warning: non-integer x = 0.177701 #> Warning: non-integer x = 0.700641 #> Warning: non-integer x = 1.293986 #> Warning: non-integer x = 0.759469 #> Warning: non-integer x = 0.952819 #> Warning: non-integer x = 1.290940 #> Warning: non-integer x = 1.568973 #> Warning: non-integer x = 0.104359 #> Warning: non-integer x = 2.808456 #> Warning: non-integer x = 2.514532 #> Warning: non-integer x = 1.096150 #> Warning: non-integer x = 1.768577 #> Warning: non-integer x = 1.797648 #> Warning: non-integer x = 1.030365 #> Warning: non-integer x = 1.386111 #> Warning: non-integer x = 1.852178 #> Warning: non-integer x = 1.966701 #> Warning: non-integer x = 1.890267 #> Warning: non-integer x = 0.974775 #> Warning: non-integer x = 0.135233 #> Warning: non-integer x = 0.321535 #> Warning: non-integer x = 1.152556 #> Warning: non-integer x = 3.999956 #> Warning: non-integer x = 1.269749 #> Warning: non-integer x = 2.258979 #> Warning: non-integer x = 1.952826 #> Warning: non-integer x = 1.519062 #> Warning: non-integer x = 3.268452 #> Warning: non-integer x = 1.198715 #> Warning: non-integer x = 1.118661 #> Warning: non-integer x = 2.061617 #> Warning: non-integer x = 0.549685 #> Warning: non-integer x = 0.248464 #> Warning: non-integer x = 0.362255 #> Warning: non-integer x = 0.137729 #> Warning: non-integer x = 0.088257 #> Warning: non-integer x = 2.036696 #> Warning: non-integer x = 1.612398 #> Warning: non-integer x = 1.105467 #> Warning: non-integer x = 1.716825 #> Warning: non-integer x = 0.811456 #> Warning: non-integer x = 0.561371 #> Warning: non-integer x = 0.667713 #> Warning: non-integer x = 0.968710 #> Warning: non-integer x = 1.584040 #> Warning: non-integer x = 0.175424 #> Warning: non-integer x = 1.320899 #> Warning: non-integer x = 0.092284 #> Warning: non-integer x = 0.253980 #> Warning: non-integer x = 1.244580 #> Warning: non-integer x = 1.530210 #> Warning: non-integer x = 0.462966 #> Warning: non-integer x = 2.139238 #> Warning: non-integer x = 1.989819 #> Warning: non-integer x = 0.231551 #> Warning: non-integer x = 2.070204 #> Warning: non-integer x = 0.015765 #> Warning: non-integer x = 2.140696 #> Warning: non-integer x = 1.939312 #> Warning: non-integer x = 1.053775 #> Warning: non-integer x = 1.074293 #> Warning: non-integer x = 1.459439 #> Warning: non-integer x = 1.697932 #> Warning: non-integer x = 0.237292 #> Warning: non-integer x = 1.602586 #> Warning: non-integer x = 1.740431 #> Warning: non-integer x = 1.684559 #> Warning: non-integer x = 1.427418 #> Warning: non-integer x = 0.315735 #> Warning: non-integer x = 1.196877 #> Warning: non-integer x = 0.483152 #> Warning: non-integer x = 0.010709 #> Warning: non-integer x = 1.299855 #> Warning: non-integer x = 0.659316 #> Warning: non-integer x = 0.391029 #> Warning: non-integer x = 1.873919 #> Warning: non-integer x = 1.533976 #> Warning: non-integer x = 1.222190 #> Warning: non-integer x = 1.875671 #> Warning: non-integer x = 0.360647 #> Warning: non-integer x = 0.582320 #> Warning: non-integer x = 0.152119 #> Warning: non-integer x = 0.777078 #> Warning: non-integer x = 1.157565 #> Warning: non-integer x = 0.294172 #> Warning: non-integer x = 0.826791 #> Warning: non-integer x = 0.234449 #> Warning: non-integer x = 1.456034 #> Warning: non-integer x = 2.155205 #> Warning: non-integer x = 0.235464 #> Warning: non-integer x = 1.583052 #> Warning: non-integer x = 1.917518 #> Warning: non-integer x = 1.353358 #> Warning: non-integer x = 1.125189 #> Warning: non-integer x = 0.377933 #> Warning: non-integer x = 2.903179 #> Warning: non-integer x = 0.430119 #> Warning: non-integer x = 3.464135 #> Warning: non-integer x = 2.041767 #> Warning: non-integer x = 1.822490 #> Warning: non-integer x = 2.123542 #> Warning: non-integer x = 0.935158 #> Warning: non-integer x = 1.166435 #> Warning: non-integer x = 1.789605 #> Warning: non-integer x = 1.415123 #> Warning: non-integer x = 2.383452 #> Warning: non-integer x = 3.260043 #> Warning: non-integer x = 1.098655 #> Warning: non-integer x = 2.016033 #> Warning: non-integer x = 2.543722 #> Warning: non-integer x = 0.554108 #> Warning: non-integer x = 4.581488 #> Warning: non-integer x = 0.619176 #> Warning: non-integer x = 3.154367 #> Warning: non-integer x = 0.588401 #> Warning: non-integer x = 0.674028 #> Warning: non-integer x = 0.646524 #> Warning: non-integer x = 1.797392 #> Warning: non-integer x = 3.246410 #> Warning: non-integer x = 0.120731 #> Warning: non-integer x = 0.942030 #> Warning: non-integer x = 1.792992 #> Warning: non-integer x = 0.566171 #> Warning: non-integer x = 2.057904 #> Warning: non-integer x = 1.635084 #> Warning: non-integer x = 1.809192 #> Warning: non-integer x = 0.285294 #> Warning: non-integer x = 0.295182 #> Warning: non-integer x = 0.208205 #> Warning: non-integer x = 2.317904 #> Warning: non-integer x = 0.384116 #> Warning: non-integer x = 1.005832 #> Warning: non-integer x = 1.639359 #> Warning: non-integer x = 0.588670 #> Warning: non-integer x = 2.095915 #> Warning: non-integer x = 0.178954 #> Warning: non-integer x = 1.148172 #> Warning: non-integer x = 0.474838 #> Warning: non-integer x = 0.363758 #> Warning: non-integer x = 1.566184 #> Warning: non-integer x = 0.245484 #> Warning: non-integer x = 1.993736 #> Warning: non-integer x = 2.180377 #> Warning: non-integer x = 2.190796 #> Warning: non-integer x = 2.004675 #> Warning: non-integer x = 0.372405 #> Warning: non-integer x = 1.201272 #> Warning: non-integer x = 0.077953 #> Warning: non-integer x = 0.598489 #> Warning: non-integer x = 1.496404 #> Warning: non-integer x = 0.973886 #> Warning: non-integer x = 2.110714 #> Warning: non-integer x = 0.201602 #> Warning: non-integer x = 0.574076 #> Warning: non-integer x = 0.046808 #> Warning: non-integer x = 1.321866 #> Warning: non-integer x = 0.114498 #> Warning: non-integer x = 0.419818 #> Warning: non-integer x = 0.169978 #> Warning: non-integer x = 1.405910 #> Warning: non-integer x = 2.956370 #> Warning: non-integer x = 0.477218 #> Warning: non-integer x = 0.559175 #> Warning: non-integer x = 1.262838 #> Warning: non-integer x = 1.386562 #> Warning: non-integer x = 4.003595 #> Warning: non-integer x = 0.547749 #> Warning: non-integer x = 0.387605 #> Warning: non-integer x = 4.461092 #> Warning: non-integer x = 0.344016 #> Warning: non-integer x = 3.938097 #> Warning: non-integer x = 3.566841 #> Warning: non-integer x = 1.083624 #> Warning: non-integer x = 0.924082 #> Warning: non-integer x = 0.779489 #> Warning: non-integer x = 0.911843 #> Warning: non-integer x = 1.951488 #> Warning: non-integer x = 0.524679 #> Warning: non-integer x = 1.504148 #> Warning: non-integer x = 1.139342 #> Warning: non-integer x = 2.815809 #> Warning: non-integer x = 0.108148 #> Warning: non-integer x = 0.271134 #> Warning: non-integer x = 1.414174 #> Warning: non-integer x = 2.675528 #> Warning: non-integer x = 0.677237 #> Warning: non-integer x = 4.339052 #> Warning: non-integer x = 2.113434 #> Warning: non-integer x = 1.527038 #> Warning: non-integer x = 1.162655 #> Warning: non-integer x = 1.370883 #> Warning: non-integer x = 1.200984 #> Warning: non-integer x = 2.219602 #> Warning: non-integer x = 0.596347 #> Warning: non-integer x = 2.660731 #> Warning: non-integer x = 1.025852 #> Warning: non-integer x = 1.344047 #> Warning: non-integer x = 0.173822 #> Warning: non-integer x = 1.772296 #> Warning: non-integer x = 1.259322 #> Warning: non-integer x = 0.028189 #> Warning: non-integer x = 0.484717 #> Warning: non-integer x = 0.970941 #> Warning: non-integer x = 1.670835 #> Warning: non-integer x = 0.664729 #> Warning: non-integer x = 1.807700 #> Warning: non-integer x = 1.668630 #> Warning: non-integer x = 2.815814 #> Warning: non-integer x = 1.851615 #> Warning: non-integer x = 0.319652 #> Warning: non-integer x = 1.348000 #> Warning: non-integer x = 1.414807 #> Warning: non-integer x = 2.615237 #> Warning: non-integer x = 1.082049 #> Warning: non-integer x = 0.539002 #> Warning: non-integer x = 1.229049 #> Warning: non-integer x = 1.031960 #> Warning: non-integer x = 1.470342 #> Warning: non-integer x = 3.515940 #> Warning: non-integer x = 1.222934 #> Warning: non-integer x = 1.080997 #> Warning: non-integer x = 0.002390 #> Warning: non-integer x = 0.296063 #> Warning: non-integer x = 0.969305 #> Warning: non-integer x = 1.714776 #> Warning: non-integer x = 0.478403 #> Warning: non-integer x = 0.396193 #> Warning: non-integer x = 1.734835 #> Warning: non-integer x = 1.019705 #> Warning: non-integer x = 2.299697 #> Warning: non-integer x = 1.243464 #> Warning: non-integer x = 1.820239 #> Warning: non-integer x = 1.544006 #> Warning: non-integer x = 0.096716 #> Warning: non-integer x = 0.917838 #> Warning: non-integer x = 2.313789 #> Warning: non-integer x = 0.108760 #> Warning: non-integer x = 0.158872 #> Warning: non-integer x = 0.167903 #> Warning: non-integer x = 0.699912 #> Warning: non-integer x = 0.007860 #> Warning: non-integer x = 1.677525 #> Warning: non-integer x = 0.439700 #> Warning: non-integer x = 3.792134 #> Warning: non-integer x = 2.646394 #> Warning: non-integer x = 0.758813 #> Warning: non-integer x = 1.843677 #> Warning: non-integer x = 2.580593 #> Warning: non-integer x = 1.021196 #> Warning: non-integer x = 1.446998 #> Warning: non-integer x = 0.081806 #> Warning: non-integer x = 0.893585 #> Warning: non-integer x = 0.640572 #> Warning: non-integer x = 0.497276 #> Warning: non-integer x = 1.634393 #> Warning: non-integer x = 2.310552 #> Warning: non-integer x = 2.158689 #> Warning: non-integer x = 2.357690 #> Warning: non-integer x = 2.293282 #> Warning: non-integer x = 0.617049 #> Warning: non-integer x = 3.276525 #> Warning: non-integer x = 1.471628 #> Warning: non-integer x = 0.347742 #> Warning: non-integer x = 1.907625 #> Warning: non-integer x = 1.287476 #> Warning: non-integer x = 0.724144 #> Warning: non-integer x = 2.323668 #> Warning: non-integer x = 1.519322 #> Warning: non-integer x = 0.322483 #> Warning: non-integer x = 1.641662 #> Warning: non-integer x = 0.299040 #> Warning: non-integer x = 3.070600 #> Warning: non-integer x = 0.926138 #> Warning: non-integer x = 0.681474 #> Warning: non-integer x = 1.039051 #> Warning: non-integer x = 0.480616 #> Warning: non-integer x = 1.330148 #> Warning: non-integer x = 1.883841 #> Warning: non-integer x = 0.464812 #> Warning: non-integer x = 0.624966 #> Warning: non-integer x = 0.063568 #> Warning: non-integer x = 0.081837 #> Warning: non-integer x = 1.594833 #> Warning: non-integer x = 1.570979 #> Warning: non-integer x = 2.708965 #> Warning: non-integer x = 1.764877 #> Warning: non-integer x = 0.535259 #> Warning: non-integer x = 1.508581 #> Warning: non-integer x = 3.392008 #> Warning: non-integer x = 1.538108 #> Warning: non-integer x = 3.248900 #> Warning: non-integer x = 2.060338 #> Warning: non-integer x = 0.046498 #> Warning: non-integer x = 1.827474 #> Warning: non-integer x = 0.699376 #> Warning: non-integer x = 0.613399 #> Warning: non-integer x = 0.790169 #> Warning: non-integer x = 0.114246 #> Warning: non-integer x = 1.397761 #> Warning: non-integer x = 0.463830 #> Warning: non-integer x = 0.908937 #> Warning: non-integer x = 1.492368 #> Warning: non-integer x = 2.075611 #> Warning: non-integer x = 0.075379 #> Warning: non-integer x = 1.901201 #> Warning: non-integer x = 0.888430 #> Warning: non-integer x = 1.791679 #> Warning: non-integer x = 2.895225 #> Warning: non-integer x = 0.049962 #> Warning: non-integer x = 3.226629 #> Warning: non-integer x = 0.335796 #> Warning: non-integer x = 1.668249 #> Warning: non-integer x = 0.024765 #> Warning: non-integer x = 0.681498 #> Warning: non-integer x = 0.327656 #> Warning: non-integer x = 0.157704 #> Warning: non-integer x = 0.637825 #> Warning: non-integer x = 0.788588 #> Warning: non-integer x = 2.403490 #> Warning: non-integer x = 1.985464 #> Warning: non-integer x = 1.045374 #> Warning: non-integer x = 1.723602 #> Warning: non-integer x = 0.077633 #> Warning: non-integer x = 1.318571 #> Warning: non-integer x = 0.120910 #> Warning: non-integer x = 2.993865 #> Warning: non-integer x = 0.329828 #> Warning: non-integer x = 1.526675 #> Warning: non-integer x = 0.468704 #> Warning: non-integer x = 1.357697 #> Warning: non-integer x = 1.666601 #> Warning: non-integer x = 0.561058 #> Warning: non-integer x = 0.554017 #> Warning: non-integer x = 3.741202 #> Warning: non-integer x = 0.851093 #> Warning: non-integer x = 2.360233 #> Warning: non-integer x = 1.493630 #> Warning: non-integer x = 0.331429 #> Warning: non-integer x = 1.586068 #> Warning: non-integer x = 0.968288 #> Warning: non-integer x = 0.248803 #> Warning: non-integer x = 2.178363 #> Warning: non-integer x = 0.964617 #> Warning: non-integer x = 0.606685 #> Warning: non-integer x = 0.829336 #> Warning: non-integer x = 1.096432 #> Warning: non-integer x = 0.191592 #> Warning: non-integer x = 2.703567 #> Warning: non-integer x = 1.546176 #> Warning: non-integer x = 1.526051 #> Warning: non-integer x = 1.308640 #> Warning: non-integer x = 0.521978 #> Warning: non-integer x = 0.294164 #> Warning: non-integer x = 1.483124 #> Warning: non-integer x = 1.032677 #> Warning: non-integer x = 1.303856 #> Warning: non-integer x = 0.768307 #> Warning: non-integer x = 0.765029 #> Warning: non-integer x = 2.446868 #> Warning: non-integer x = 0.133725 #> Warning: non-integer x = 0.302058 #> Warning: non-integer x = 2.515920 #> Warning: non-integer x = 0.457873 #> Warning: non-integer x = 2.455030 #> Warning: non-integer x = 2.524674 #> Warning: non-integer x = 1.942832 #> Warning: non-integer x = 1.578074 #> Warning: non-integer x = 0.681943 #> Warning: non-integer x = 2.110240 #> Warning: non-integer x = 2.567364 #> Warning: non-integer x = 0.598644 #> Warning: non-integer x = 0.857251 #> Warning: non-integer x = 1.303401 #> Warning: non-integer x = 3.410558 #> Warning: non-integer x = 2.313112 #> Warning: non-integer x = 0.272993 #> Warning: non-integer x = 0.350908 #> Warning: non-integer x = 0.203176 #> Warning: non-integer x = 1.658880 #> Warning: non-integer x = 0.377083 #> Warning: non-integer x = 0.816090 #> Warning: non-integer x = 1.296962 #> Warning: non-integer x = 1.640389 #> Warning: non-integer x = 0.889705 #> Warning: non-integer x = 0.895551 #> Warning: non-integer x = 1.081931 #> Warning: non-integer x = 0.908304 #> Warning: non-integer x = 1.024641 #> Warning: non-integer x = 0.573580 #> Warning: non-integer x = 0.035447 #> Warning: non-integer x = 5.590777 #> Warning: non-integer x = 0.926226 #> Warning: non-integer x = 1.377172 #> Warning: non-integer x = 1.530932 #> Warning: non-integer x = 0.993906 #> Warning: non-integer x = 0.844538 #> Warning: non-integer x = 1.050862 #> Warning: non-integer x = 2.273264 #> Warning: non-integer x = 0.258610 #> Warning: non-integer x = 3.030129 #> Warning: non-integer x = 1.546232 #> Warning: non-integer x = 3.604547 #> Warning: non-integer x = 0.984941 #> Warning: non-integer x = 0.173406 #> Warning: non-integer x = 1.230733 #> Warning: non-integer x = 0.405654 #> Warning: non-integer x = 1.307871 #> Warning: non-integer x = 1.937188 #> Warning: non-integer x = 2.257707 #> Warning: non-integer x = 2.364841 #> Warning: non-integer x = 2.474600 #> Warning: non-integer x = 2.551008 #> Warning: non-integer x = 0.712164 #> Warning: non-integer x = 0.555054 #> Warning: non-integer x = 0.722131 #> Warning: non-integer x = 1.772399 #> Warning: non-integer x = 1.214323 #> Warning: non-integer x = 0.362046 #> Warning: non-integer x = 3.282391 #> Warning: non-integer x = 3.142822 #> Warning: non-integer x = 0.051665 #> Warning: non-integer x = 0.969616 #> Warning: non-integer x = 0.547899 #> Warning: non-integer x = 0.694613 #> Warning: non-integer x = 1.705081 #> Warning: non-integer x = 2.094957 #> Warning: non-integer x = 2.940574 #> Warning: non-integer x = 0.719471 #> Warning: non-integer x = 1.350489 #> Warning: non-integer x = 0.426406 #> Warning: non-integer x = 1.800477 #> Warning: non-integer x = 0.402590 #> Warning: non-integer x = 1.331529"},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite_sipw.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the Individual Treatment Effect using Stabilized Inverse Propensity\nWeighting — estimate_ite_sipw","title":"Estimate the Individual Treatment Effect using Stabilized Inverse Propensity\nWeighting — estimate_ite_sipw","text":"Estimates Individual Treatment Effect using Stabilized Inverse Propensity Weighting given response vector, treatment vector, features matrix.","code":""},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite_sipw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the Individual Treatment Effect using Stabilized Inverse Propensity\nWeighting — estimate_ite_sipw","text":"","code":"estimate_ite_sipw(y, z, X, ps_method)"},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite_sipw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the Individual Treatment Effect using Stabilized Inverse Propensity\nWeighting — estimate_ite_sipw","text":"y observed response vector z treatment vector X features matrix ps_method estimation method propensity score","code":""},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite_sipw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the Individual Treatment Effect using Stabilized Inverse Propensity\nWeighting — estimate_ite_sipw","text":"vector ITE estimates","code":""},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite_sipw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate the Individual Treatment Effect using Stabilized Inverse Propensity\nWeighting — estimate_ite_sipw","text":"","code":"dataset <- generate_cre_dataset(n = 1000, rho = 0, n_rules = 2, p = 10,                                 effect_size = 2, binary = FALSE)  # Initialize parameters y <- dataset[[\"y\"]] z <- dataset[[\"z\"]] X <- as.data.frame(dataset[[\"X\"]]) ps_method <- \"SL.xgboost\"  ite_list <- estimate_ite_sipw(y, z, X, ps_method)"},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite_xbart.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the Individual Treatment Effect using Accelerated Bayesian Additive Regression Trees — estimate_ite_xbart","title":"Estimate the Individual Treatment Effect using Accelerated Bayesian Additive Regression Trees — estimate_ite_xbart","text":"Method estimating Individual Treatment Effect using Accelerated Bayesian Additive Regression Trees given response vector, treatment vector, features matrix","code":""},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite_xbart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the Individual Treatment Effect using Accelerated Bayesian Additive Regression Trees — estimate_ite_xbart","text":"","code":"estimate_ite_xbart(y, z, X, include_ps, ps_method)"},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite_xbart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the Individual Treatment Effect using Accelerated Bayesian Additive Regression Trees — estimate_ite_xbart","text":"y observed response vector z treatment vector X features matrix include_ps whether include propensity score estimate covariate ITE estimation ps_method estimation method propensity score","code":""},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite_xbart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the Individual Treatment Effect using Accelerated Bayesian Additive Regression Trees — estimate_ite_xbart","text":"list ITE estimates standard deviations ITE estimates","code":""},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite_xbart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate the Individual Treatment Effect using Accelerated Bayesian Additive Regression Trees — estimate_ite_xbart","text":"","code":"dataset <- generate_cre_dataset(n = 1000, rho = 0, n_rules = 2, p = 10,                                 effect_size = 2, binary = FALSE)  # Initialize parameters y <- dataset[[\"y\"]] z <- dataset[[\"z\"]] X <- as.data.frame(dataset[[\"X\"]]) include_ps <- TRUE ps_method <- \"SL.xgboost\"  if (requireNamespace(\"XBART\", quietly = TRUE)) {     ite_list <- estimate_ite_xbart(y, z, X, include_ps, ps_method) }"},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite_xbcf.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the Individual Treatment Effect using Accelerated Bayesian Causal Forest — estimate_ite_xbcf","title":"Estimate the Individual Treatment Effect using Accelerated Bayesian Causal Forest — estimate_ite_xbcf","text":"Method estimating Individual Treatment Effect using Accelerated Bayesian Causal Forest given response vector, treatment vector, features matrix","code":""},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite_xbcf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the Individual Treatment Effect using Accelerated Bayesian Causal Forest — estimate_ite_xbcf","text":"","code":"estimate_ite_xbcf(y, z, X, ps_method)"},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite_xbcf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the Individual Treatment Effect using Accelerated Bayesian Causal Forest — estimate_ite_xbcf","text":"y observed response vector z treatment vector X features matrix ps_method estimation method propensity score","code":""},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite_xbcf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the Individual Treatment Effect using Accelerated Bayesian Causal Forest — estimate_ite_xbcf","text":"list ITE estimates standard deviations ITE estimates","code":""},{"path":"https://github.com/fasrc/CRE/reference/estimate_ite_xbcf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate the Individual Treatment Effect using Accelerated Bayesian Causal Forest — estimate_ite_xbcf","text":"","code":"dataset <- generate_cre_dataset(n = 1000, rho = 0, n_rules = 2, p = 10,                                 effect_size = 2, binary = FALSE)  # Initialize parameters y <- dataset[[\"y\"]] z <- dataset[[\"z\"]] X <- as.data.frame(dataset[[\"X\"]]) ps_method <- \"SL.xgboost\"  if (requireNamespace(\"XBCF\", quietly = TRUE)) {     ite_list <- estimate_ite_xbcf(y, z, X, ps_method) }"},{"path":"https://github.com/fasrc/CRE/reference/estimate_ps.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the Propensity Score — estimate_ps","title":"Estimate the Propensity Score — estimate_ps","text":"Method estimating Propensity Score given treatment vector features matrix","code":""},{"path":"https://github.com/fasrc/CRE/reference/estimate_ps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the Propensity Score — estimate_ps","text":"","code":"estimate_ps(z, X, ps_method = \"SL.xgboost\")"},{"path":"https://github.com/fasrc/CRE/reference/estimate_ps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the Propensity Score — estimate_ps","text":"z treatment vector X features matrix ps_method estimation model propensity score","code":""},{"path":"https://github.com/fasrc/CRE/reference/estimate_ps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the Propensity Score — estimate_ps","text":"list propensity score estimates","code":""},{"path":"https://github.com/fasrc/CRE/reference/estimate_ps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate the Propensity Score — estimate_ps","text":"","code":"dataset <- generate_cre_dataset(n = 1000, rho = 0, n_rules = 2, p = 10,                                 effect_size = 2, binary = FALSE)  # Initialize parameters z <- dataset[[\"z\"]] X <- as.data.frame(dataset[[\"X\"]]) ps_method <- \"SL.xgboost\"  est_ps <- estimate_ps(z, X, ps_method)"},{"path":"https://github.com/fasrc/CRE/reference/extract_rules.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Rules — extract_rules","title":"Extract Rules — extract_rules","text":"Method extracting causal rules Random Forest Gradient Boosting algorithms","code":""},{"path":"https://github.com/fasrc/CRE/reference/extract_rules.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Rules — extract_rules","text":"","code":"extract_rules(treelist, X, ntrees, ite_std, take_1, type_decay)"},{"path":"https://github.com/fasrc/CRE/reference/extract_rules.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Rules — extract_rules","text":"treelist list decision trees X features matrix ntrees number decision trees ite_std standardized ITE take_1 whether call take1 helper function type_decay type decay apply pruning rules","code":""},{"path":"https://github.com/fasrc/CRE/reference/extract_rules.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Rules — extract_rules","text":"vector causal rules","code":""},{"path":"https://github.com/fasrc/CRE/reference/extract_rules.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Rules — extract_rules","text":"","code":"dataset <- generate_cre_dataset(n = 1000, rho = 0, n_rules = 2, p = 10,                                 effect_size = 2, binary = FALSE) y <- as.matrix(dataset[[\"y\"]]) z <- as.matrix(dataset[[\"z\"]]) X <- as.matrix(dataset[[\"X\"]]) ite_method <- \"bart\" include_ps <- TRUE ps_method <- \"SL.xgboost\" or_method <- NA ntrees <- 100 min_nodes <- 20 max_nodes <- 5 binary <- FALSE  # Estimate ITE ite_list <- estimate_ite(y, z, X, ite_method, include_ps, ps_method, or_method, binary) #> fitting treatment model via method 'bart' #> fitting response model via method 'bart' ite <- ite_list[[\"ite\"]] ite_std <- ite_list[[\"ite_std\"]]  # Set parameters N <- dim(X)[1] sf <- min(1, (11 * sqrt(N) + 1) / N) mn <- 2 + floor(stats::rexp(1, 1 / (max_nodes - 2))) # Random Forest forest <- suppressWarnings(randomForest::randomForest(x = X, y = ite_std,                                                       sampsize = sf * N,                                                    replace = FALSE,                                                    ntree = 1, maxnodes = mn,                                                    nodesize = min_nodes)) for(i in 2:ntrees) {   mn <- 2 + floor(stats::rexp(1, 1 / (max_nodes - 2)))   model1_RF <- suppressWarnings(randomForest::randomForest(x = X, y = ite_std,                                                            sampsize = sf * N,                                                            replace = FALSE,                                                            ntree = 1, maxnodes = mn,                                                            nodesize = min_nodes))   forest <- randomForest::combine(forest, model1_RF) } treelist <- inTrees::RF2List(forest) take_1 <- FALSE type_decay <- 2  rules_RF <- extract_rules(treelist, X, ntrees, ite_std, take_1, type_decay) #> 462 rules (length<=15) were extracted from the first 100 trees."},{"path":"https://github.com/fasrc/CRE/reference/generate_cre_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate CRE Synthetic Data — generate_cre_dataset","title":"Generate CRE Synthetic Data — generate_cre_dataset","text":"Generates synthetic data continues binary outcome testing Causal Rule Ensemble package","code":""},{"path":"https://github.com/fasrc/CRE/reference/generate_cre_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate CRE Synthetic Data — generate_cre_dataset","text":"","code":"generate_cre_dataset(   n = 1000,   rho = 0,   n_rules = 2,   p = 10,   effect_size = 2,   binary = FALSE )"},{"path":"https://github.com/fasrc/CRE/reference/generate_cre_dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate CRE Synthetic Data — generate_cre_dataset","text":"n number observations rho correlation within covariates (default: 0) n_rules number causal rules, either 2 (default) 4 p number covariates (default: 10) effect_size effect size magnitude (default: 0.5) TODO: range effect size magnitude? binary whether use binary continuous outcomes, either TRUE (default) FALSE","code":""},{"path":"https://github.com/fasrc/CRE/reference/generate_cre_dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate CRE Synthetic Data — generate_cre_dataset","text":"list synthetic data containing outcome vector, treatment vector, matrix p covariates","code":""},{"path":"https://github.com/fasrc/CRE/reference/generate_cre_dataset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate CRE Synthetic Data — generate_cre_dataset","text":"","code":"set.seed(123) dataset <- generate_cre_dataset(n = 1000, rho = 0, n_rules = 2, p = 10,                                 effect_size = 2, binary = FALSE)"},{"path":"https://github.com/fasrc/CRE/reference/generate_rules.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Rules — generate_rules","title":"Generate Rules — generate_rules","text":"Method generating causal rules.","code":""},{"path":"https://github.com/fasrc/CRE/reference/generate_rules.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Rules — generate_rules","text":"","code":"generate_rules(X, ite_std, ntrees_rf, ntrees_gbm, min_nodes, max_nodes)"},{"path":"https://github.com/fasrc/CRE/reference/generate_rules.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Rules — generate_rules","text":"X features matrix ite_std standardized ITE ntrees_rf number decision trees randomForest ntrees_gbm number decision trees gradient boosting min_nodes minimum size trees' terminal nodes max_nodes maximum size trees' terminal nodes","code":""},{"path":"https://github.com/fasrc/CRE/reference/generate_rules.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Rules — generate_rules","text":"vector causal rules","code":""},{"path":"https://github.com/fasrc/CRE/reference/generate_rules.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Rules — generate_rules","text":"","code":"dataset <- generate_cre_dataset(n = 1000, rho = 0, n_rules = 2, p = 10,                                 effect_size = 2, binary = FALSE)  # Initialize parameters y <- dataset[[\"y\"]] z <- dataset[[\"z\"]] X <- as.data.frame(dataset[[\"X\"]]) X_names <- names(as.data.frame(X)) ratio_dis <- 0.25 ite_method_dis <- \"bart\" include_ps_dis <- TRUE ps_method_dis <- \"SL.xgboost\" or_method_dis <- NA ntrees_rf <- 100 ntrees_gbm <- 50 min_nodes <- 20 max_nodes <- 5 include_offset <- FALSE offset_name <- NA binary <- FALSE  # Split data X <- as.matrix(X) y <- as.matrix(y) z <- as.matrix(z) subgroups <- split_data(y, z, X, ratio_dis) discovery <- subgroups[[1]] inference <- subgroups[[2]]  # Generate y, z, and X for discovery and inference data y_dis <- discovery[,1] z_dis <- discovery[,2] X_dis <- discovery[,3:ncol(discovery)]  # Estimate ITE on Discovery Subsample ite_list_dis <- estimate_ite(y_dis, z_dis, X_dis, ite_method_dis, include_ps_dis,                              ps_method_dis, or_method_dis, binary, X_names,                              include_offset, offset_name) #> fitting treatment model via method 'bart' #> fitting response model via method 'bart' ite_dis <- ite_list_dis[[\"ite\"]] ite_std_dis <- ite_list_dis[[\"ite_std\"]]  # Generate rules list initial_rules_dis <- generate_rules(X_dis, ite_std_dis, ntrees_rf, ntrees_gbm,                                     min_nodes, max_nodes) #> 435 rules (length<=15) were extracted from the first 100 trees. #> 100 rules (length<=15) were extracted from the first 50 trees."},{"path":"https://github.com/fasrc/CRE/reference/generate_rules_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Rules Matrix — generate_rules_matrix","title":"Generate Rules Matrix — generate_rules_matrix","text":"Generates matrix causal rules given list.","code":""},{"path":"https://github.com/fasrc/CRE/reference/generate_rules_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Rules Matrix — generate_rules_matrix","text":"","code":"generate_rules_matrix(X, rules_list, t)"},{"path":"https://github.com/fasrc/CRE/reference/generate_rules_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Rules Matrix — generate_rules_matrix","text":"X features matrix rules_list vector causal rules t common support used generating causal rules matrix","code":""},{"path":"https://github.com/fasrc/CRE/reference/generate_rules_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Rules Matrix — generate_rules_matrix","text":"list : raw matrix causal rules standardized matrix causal rules, vector causal rules","code":""},{"path":"https://github.com/fasrc/CRE/reference/generate_rules_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Rules Matrix — generate_rules_matrix","text":"","code":"dataset <- generate_cre_dataset(n = 1000, rho = 0, n_rules = 2, p = 10,                                 effect_size = 2, binary = FALSE)  # Initialize parameters y <- dataset[[\"y\"]] z <- dataset[[\"z\"]] X <- as.data.frame(dataset[[\"X\"]]) X_names <- names(as.data.frame(X)) ratio_dis <- 0.25 ite_method_dis <- \"bart\" include_ps_dis <- TRUE ps_method_dis <- \"SL.xgboost\" or_method_dis <- NA ntrees_rf <- 100 ntrees_gbm <- 50 min_nodes <- 20 max_nodes <- 5 t <- 0.025 include_offset <- FALSE offset_name <- NA binary <- FALSE  # Split data X <- as.matrix(X) y <- as.matrix(y) z <- as.matrix(z) subgroups <- split_data(y, z, X, ratio_dis) discovery <- subgroups[[1]] inference <- subgroups[[2]]  # Generate y, z, and X for discovery and inference data y_dis <- discovery[,1] z_dis <- discovery[,2] X_dis <- discovery[,3:ncol(discovery)]  # Estimate ITE on Discovery Subsample ite_list_dis <- estimate_ite(y_dis, z_dis, X_dis, ite_method_dis, include_ps_dis,                              ps_method_dis, or_method_dis, binary, X_names,                              include_offset, offset_name) #> fitting treatment model via method 'bart' #> fitting response model via method 'bart' ite_dis <- ite_list_dis[[\"ite\"]] ite_std_dis <- ite_list_dis[[\"ite_std\"]]  # Generate rules list initial_rules_dis <- generate_rules(X_dis, ite_std_dis, ntrees_rf, ntrees_gbm,                                     min_nodes, max_nodes) #> 448 rules (length<=15) were extracted from the first 100 trees. #> 100 rules (length<=15) were extracted from the first 50 trees.  # Generate rules matrix rules_all_dis <- generate_rules_matrix(X_dis, initial_rules_dis, t)"},{"path":"https://github.com/fasrc/CRE/reference/get_logger.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Logger Settings — get_logger","title":"Get Logger Settings — get_logger","text":"Returns current logger settings.","code":""},{"path":"https://github.com/fasrc/CRE/reference/get_logger.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Logger Settings — get_logger","text":"","code":"get_logger()"},{"path":"https://github.com/fasrc/CRE/reference/get_logger.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Logger Settings — get_logger","text":"Returns list includes logger_file_path logger_level.","code":""},{"path":"https://github.com/fasrc/CRE/reference/get_logger.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Logger Settings — get_logger","text":"","code":"set_logger(\"mylogger.log\", \"INFO\") log_meta <- get_logger()"},{"path":"https://github.com/fasrc/CRE/reference/interpret_select_rules.html","id":null,"dir":"Reference","previous_headings":"","what":"Interpret Select Rules — interpret_select_rules","title":"Interpret Select Rules — interpret_select_rules","text":"Replace column numbers Select Rules vector real names","code":""},{"path":"https://github.com/fasrc/CRE/reference/interpret_select_rules.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interpret Select Rules — interpret_select_rules","text":"","code":"interpret_select_rules(select_rules_dis, X_names)"},{"path":"https://github.com/fasrc/CRE/reference/interpret_select_rules.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interpret Select Rules — interpret_select_rules","text":"select_rules_dis vector select causal rules X_names real names covariates","code":""},{"path":"https://github.com/fasrc/CRE/reference/interpret_select_rules.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interpret Select Rules — interpret_select_rules","text":"vector select causal rules interpretable","code":""},{"path":"https://github.com/fasrc/CRE/reference/interpret_select_rules.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interpret Select Rules — interpret_select_rules","text":"","code":"dataset <- generate_cre_dataset(n = 1000, rho = 0, n_rules = 2, p = 10,                                 effect_size = 2, binary = FALSE)  # Initialize parameters y <- dataset[[\"y\"]] z <- dataset[[\"z\"]] X <- as.data.frame(dataset[[\"X\"]]) X_names <- names(as.data.frame(X)) ratio_dis <- 0.25 ite_method_dis <- \"bart\" include_ps_dis <- TRUE ps_method_dis <- \"SL.xgboost\" or_method_dis <- NA ntrees_rf <- 100 ntrees_gbm <- 50 min_nodes <- 20 max_nodes <- 5 t <- 0.025 q <- 0.8 rules_method <- NA include_offset <- FALSE offset_name <- NA binary <- FALSE  # Split data X <- as.matrix(X) y <- as.matrix(y) z <- as.matrix(z) subgroups <- split_data(y, z, X, ratio_dis) discovery <- subgroups[[1]] inference <- subgroups[[2]]  # Generate y, z, and X for discovery and inference data y_dis <- discovery[,1] z_dis <- discovery[,2] X_dis <- discovery[,3:ncol(discovery)]  y_inf <- inference[,1] z_inf <- inference[,2] X_inf <- inference[,3:ncol(inference)]  # Estimate ITE on Discovery Subsample ite_list_dis <- estimate_ite(y_dis, z_dis, X_dis, ite_method_dis, include_ps_dis,                              ps_method_dis, or_method_dis, binary, X_names,                              include_offset, offset_name) #> fitting treatment model via method 'bart' #> fitting response model via method 'bart' ite_dis <- ite_list_dis[[\"ite\"]] ite_std_dis <- ite_list_dis[[\"ite_std\"]]  # Generate rules list initial_rules_dis <- generate_rules(X_dis, ite_std_dis, ntrees_rf, ntrees_gbm,                                     min_nodes, max_nodes) #> 397 rules (length<=15) were extracted from the first 100 trees. #> 100 rules (length<=15) were extracted from the first 50 trees.  # Generate rules matrix rules_all_dis <- generate_rules_matrix(X_dis, initial_rules_dis, t) rules_matrix_dis <- rules_all_dis[[\"rules_matrix\"]] rules_matrix_std_dis <- rules_all_dis[[\"rules_matrix_std\"]] rules_list_dis <- rules_all_dis[[\"rules_list\"]]  # Select important rules select_rules_dis <- as.character(select_causal_rules(rules_matrix_std_dis, rules_list_dis,                                                      ite_std_dis, binary, q, rules_method)) select_rules_matrix_dis <- rules_matrix_dis[,which(rules_list_dis %in% select_rules_dis)] select_rules_matrix_std_dis <- rules_matrix_std_dis[,which(rules_list_dis %in% select_rules_dis)] if (length(select_rules_dis) == 0) stop(\"No significant rules were discovered. Ending Analysis.\")  # Estimate CATE rules_matrix_inf <- matrix(0, nrow = dim(X_inf)[1], ncol = length(select_rules_dis)) for (i in 1:length(select_rules_dis)) {   rules_matrix_inf[eval(parse(text = select_rules_dis[i]), list(X = X_inf)), i] <- 1 } select_rules_interpretable <- interpret_select_rules(select_rules_dis, X_names)"},{"path":"https://github.com/fasrc/CRE/reference/plot.cre.html","id":null,"dir":"Reference","previous_headings":"","what":"Extend generic plot functions for cre class — plot.cre","title":"Extend generic plot functions for cre class — plot.cre","text":"wrapper function extend generic plot functions cre class.","code":""},{"path":"https://github.com/fasrc/CRE/reference/plot.cre.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extend generic plot functions for cre class — plot.cre","text":"","code":"# S3 method for cre plot(x, ...)"},{"path":"https://github.com/fasrc/CRE/reference/plot.cre.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extend generic plot functions for cre class — plot.cre","text":"x cre object. ... Additional arguments passed customize plot.","code":""},{"path":"https://github.com/fasrc/CRE/reference/plot.cre.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extend generic plot functions for cre class — plot.cre","text":"Returns ggplot2 object, invisibly. function called side effects.","code":""},{"path":"https://github.com/fasrc/CRE/reference/select_causal_rules.html","id":null,"dir":"Reference","previous_headings":"","what":"Select Causal Rules — select_causal_rules","title":"Select Causal Rules — select_causal_rules","text":"Selects causal rules important.","code":""},{"path":"https://github.com/fasrc/CRE/reference/select_causal_rules.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select Causal Rules — select_causal_rules","text":"","code":"select_causal_rules(   rules_matrix_std,   rules_list,   ite_std,   binary,   q,   rules_method )"},{"path":"https://github.com/fasrc/CRE/reference/select_causal_rules.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select Causal Rules — select_causal_rules","text":"rules_matrix_std standardized causal rules matrix rules_list vector causal rules ite_std standardized ITE binary whether outcome binary q selection threshold used selecting causal rules rules_method method selecting causal rules binary outcomes, either \"conservative\", \"anticonservative\", NA","code":""},{"path":"https://github.com/fasrc/CRE/reference/select_causal_rules.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select Causal Rules — select_causal_rules","text":"vector causal rules","code":""},{"path":"https://github.com/fasrc/CRE/reference/select_causal_rules.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select Causal Rules — select_causal_rules","text":"","code":"dataset <- generate_cre_dataset(n = 1000, rho = 0, n_rules = 2, p = 10,                                 effect_size = 2, binary = FALSE)  # Initialize parameters y <- dataset[[\"y\"]] z <- dataset[[\"z\"]] X <- as.data.frame(dataset[[\"X\"]]) X_names <- names(as.data.frame(X)) ratio_dis <- 0.25 ite_method_dis <- \"bart\" include_ps_dis <- TRUE ps_method_dis <- \"SL.xgboost\" or_method_dis <- NA ntrees_rf <- 100 ntrees_gbm <- 50 min_nodes <- 20 max_nodes <- 5 t <- 0.025 q <- 0.8 rules_method <- NA include_offset <- FALSE offset_name <- NA binary <- FALSE  # Split data X <- as.matrix(X) y <- as.matrix(y) z <- as.matrix(z) subgroups <- split_data(y, z, X, ratio_dis) discovery <- subgroups[[1]] inference <- subgroups[[2]]  # Generate y, z, and X for discovery and inference data y_dis <- discovery[,1] z_dis <- discovery[,2] X_dis <- discovery[,3:ncol(discovery)]  # Estimate ITE on Discovery Subsample ite_list_dis <- estimate_ite(y_dis, z_dis, X_dis, ite_method_dis, include_ps_dis,                              ps_method_dis, or_method_dis, binary, X_names,                              include_offset, offset_name) #> fitting treatment model via method 'bart' #> fitting response model via method 'bart' ite_dis <- ite_list_dis[[\"ite\"]] ite_std_dis <- ite_list_dis[[\"ite_std\"]]  # Generate rules list initial_rules_dis <- generate_rules(X_dis, ite_std_dis, ntrees_rf, ntrees_gbm,                                     min_nodes, max_nodes) #> 383 rules (length<=15) were extracted from the first 100 trees. #> 100 rules (length<=15) were extracted from the first 50 trees.  # Generate rules matrix rules_all_dis <- generate_rules_matrix(X_dis, initial_rules_dis, t) rules_matrix_dis <- rules_all_dis[[\"rules_matrix\"]] rules_matrix_std_dis <- rules_all_dis[[\"rules_matrix_std\"]] rules_list_dis <- rules_all_dis[[\"rules_list\"]]  # Select important rules select_rules_dis <- as.character(select_causal_rules(rules_matrix_std_dis, rules_list_dis,                                                      ite_std_dis, binary, q, rules_method))"},{"path":"https://github.com/fasrc/CRE/reference/set_logger.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Logger Settings — set_logger","title":"Set Logger Settings — set_logger","text":"Updates logger settings, including log level location file.","code":""},{"path":"https://github.com/fasrc/CRE/reference/set_logger.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Logger Settings — set_logger","text":"","code":"set_logger(logger_file_path = \"CRE.log\", logger_level = \"INFO\")"},{"path":"https://github.com/fasrc/CRE/reference/set_logger.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Logger Settings — set_logger","text":"logger_file_path path (including file name) log messages. (Default: CRE.log) logger_level log level. Available levels include: TRACE DEBUG INFO (Default) SUCESS WARN ERROR FATAL","code":""},{"path":"https://github.com/fasrc/CRE/reference/set_logger.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set Logger Settings — set_logger","text":"return value. function called side effects.","code":""},{"path":"https://github.com/fasrc/CRE/reference/set_logger.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set Logger Settings — set_logger","text":"","code":"set_logger(\"Debug\")"},{"path":"https://github.com/fasrc/CRE/reference/split_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Split Data — split_data","title":"Split Data — split_data","text":"Splits data discovery inference subsamples.","code":""},{"path":"https://github.com/fasrc/CRE/reference/split_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split Data — split_data","text":"","code":"split_data(y, z, X, ratio_dis)"},{"path":"https://github.com/fasrc/CRE/reference/split_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split Data — split_data","text":"y observed response vector z treatment vector X features matrix ratio_dis ratio data delegated discovery subsample","code":""},{"path":"https://github.com/fasrc/CRE/reference/split_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split Data — split_data","text":"list containing discovery inference subsamples","code":""},{"path":"https://github.com/fasrc/CRE/reference/split_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split Data — split_data","text":"","code":"dataset <- generate_cre_dataset(n = 1000, rho = 0, n_rules = 2, p = 10,                                 effect_size = 2, binary = FALSE)  # Initialize parameters y <- dataset[[\"y\"]] z <- dataset[[\"z\"]] X <- as.data.frame(dataset[[\"X\"]]) ratio_dis <- 0.25  # Split data X <- as.matrix(X) y <- as.matrix(y) z <- as.matrix(z) subgroups <- split_data(y, z, X, ratio_dis) discovery <- subgroups[[1]] inference <- subgroups[[2]]"},{"path":"https://github.com/fasrc/CRE/reference/take1.html","id":null,"dir":"Reference","previous_headings":"","what":"Take 1 — take1","title":"Take 1 — take1","text":"Generate list indices","code":""},{"path":"https://github.com/fasrc/CRE/reference/take1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Take 1 — take1","text":"","code":"take1(len)"},{"path":"https://github.com/fasrc/CRE/reference/take1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Take 1 — take1","text":"len length value","code":""},{"path":"https://github.com/fasrc/CRE/reference/take1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Take 1 — take1","text":"vector indices","code":""},{"path":"https://github.com/fasrc/CRE/reference/take1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Take 1 — take1","text":"","code":"ind <- take1(10)"},{"path":[]},{"path":"https://github.com/fasrc/CRE/news/index.html","id":"changed-0-0-1","dir":"Changelog","previous_headings":"","what":"Changed","title":"CRE 0.0.1 (2021-10-20)","text":"estimate_cate include two methods estimating CATE values cre added initial checks binary outcome whether include propensity score ITE estimation estimate_ite_xyz conduct propensity score estimation using helper function Removed seed input generate_cre_dataset function.","code":""},{"path":"https://github.com/fasrc/CRE/news/index.html","id":"added-0-0-1","dir":"Changelog","previous_headings":"","what":"Added","title":"CRE 0.0.1 (2021-10-20)","text":"set_logger get_logger check_input_data function example generate_cre_dataset generate_cre_dataset function generate synthetic data testing package test-generate_cre_dataset function test estimate_ps function estimate propensity score estimate_ite_xbart function generate ITE estimates using accelerated BART estimate_ite_xbcf function generate ITE estimates using accelerated BCF analyze_sensitivity function conduct sensitivity analysis unmeasured confounding cre function perform entire Causal Rule Ensemble method estimate_cate function generate CATE estimates ITE estimates select rules estimate_ite function generate ITE estimates using user-specified method (calls estimate_ite_xyz functions) estimate_ite_bart function generate ITE estimates using BART estimate_ite_bcf function generate ITE estimates using Bayesian Causal Forests estimate_ite_cf function generate ITE estimates using Causal Forests estimate_ite_ipw function generate ITE estimates using IPW estimate_ite_or function generate ITE estimates using Outcome Regression estimate_ite_sipw function generate ITE estimates using SIPW extract_rules function extract list causal rules randomForest GBM models generate_rules function generate causal rule models using randomForest GBM methods generate_rules_matrix function convert list causal rules matrix select_causal_rules function apply penalized regression causal rules select important ones split_data function split input data discovery inference subsamples take1 function create subsample indices","code":""}]
